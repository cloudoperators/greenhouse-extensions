{{- if .Values.testFramework.enabled -}}
# SPDX-FileCopyrightText: 2024 SAP SE or an SAP affiliate company and Greenhouse contributors
# SPDX-License-Identifier: Apache-2.0
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-test
  namespace: {{ .Release.Namespace }}
  labels:
    type: integration-test
    {{- include "opensearch-cluster-local.labels" . | nindent 4 }}
data:
  run.sh: |-

    #!/usr/bin/env bats

    load "/usr/lib/bats/bats-detik/utils"
    load "/usr/lib/bats/bats-detik/detik"

    DETIK_CLIENT_NAME="kubectl"

    @test "Verify successful deployment and running status of the operator pod" {
        try "at most 4 times every 5s to get pods named 'opensearch-operator-controller-manager-[a-z0-9]+-[a-z0-9]+' and verify that '.status.phase' is 'Running'"
    }

    @test "Verify successful deployment of the operator service" {
        verify "there is 1 service named '^opensearch-operator-controller-manager-metrics-service$'"
    }

    @test "Verify presence of OpenSearchCluster resource" {
      [ "$(kubectl get opensearchclusters.opensearch.opster.io -n opensearch-logs --no-headers | wc -l)" -ge 1 ]
    }

    @test "Verify presence of OpenSearchIndexTemplate resource" {
      [ "$(kubectl get opensearchindextemplates.opensearch.opster.io -n opensearch-logs --no-headers | wc -l)" -ge 1 ]
    }

    @test "Verify presence of OpenSearchRole resource" {
      [ "$(kubectl get opensearchroles.opensearch.opster.io -n opensearch-logs --no-headers | wc -l)" -ge 1 ]
    }

    @test "Verify presence of OpenSearchUser resource" {
      [ "$(kubectl get opensearchusers.opensearch.opster.io -n opensearch-logs --no-headers | wc -l)" -ge 1 ]
    }

    @test "Verify presence of OpenSearchUserRoleBinding resource" {
      [ "$(kubectl get opensearchuserrolebindings.opensearch.opster.io -n opensearch-logs --no-headers | wc -l)" -ge 1 ]
    }

    @test "Verify presence of OpenSearchISMPolicy resource" {
      [ "$(kubectl get opensearchismpolicies.opensearch.opster.io -n opensearch-logs --no-headers | wc -l)" -ge 1 ]
    }

    @test "Verify presence of OpenSearchComponentTemplate resource" {
      [ "$(kubectl get opensearchcomponenttemplates.opensearch.opster.io -n opensearch-logs --no-headers | wc -l)" -ge 1 ]
    }

    @test "Verify presence of OpenSearchTenant resource" {
      [ "$(kubectl get opensearchtenants.opensearch.opster.io -n opensearch-logs --no-headers | wc -l)" -ge 0 ]
    }

    @test "Verify OpenSearch client service exists" {
        verify "there is 1 service named 'opensearch-client-external'"
    }

    @test "Verify OpenSearch main, data, and bootstrap pods are running" {
      kubectl get pods -n opensearch-logs | grep -E 'opensearch-(main|data|bootstrap|client)-' | awk '{print $1,$3}' | while read name status; do
        [[ "$status" == "Running" ]] || exit 1
      done
    }

    @test "Verify OpenSearch dashboards pod is running or starting" {
      pods=$(kubectl get pods -n opensearch-logs -l opensearch.cluster.dashboards=opensearch --no-headers 2>/dev/null | wc -l)
      if [ "$pods" -eq 0 ]; then
        skip "No dashboards pod found"
      else
        status=$(kubectl get pods -n opensearch-logs -l opensearch.cluster.dashboards=opensearch -o jsonpath='{.items[0].status.phase}')
        if [[ "$status" == "Running" || "$status" == "Pending" || "$status" == "Succeeded" ]]; then
          true
        else
          echo "If this test fails, ensure the ServiceMonitor CRD is installed in your cluster (required for dashboards monitoring)."
          false
        fi
      fi
    }

    @test "Verify OpenSearch main, data, and client services exist" {
      for svc in opensearch-main opensearch-data opensearch-client; do
        kubectl get svc $svc -n opensearch-logs > /dev/null
      done
    }

    @test "Verify OpenSearch dashboards pod label" {
      pods=$(kubectl get pods -n opensearch-logs -l opensearch.cluster.dashboards=opensearch --no-headers 2>/dev/null | wc -l)
      if [ "$pods" -eq 0 ]; then
        skip "No dashboards pod found"
      else
        kubectl get pods -n opensearch-logs --show-labels | grep -q "opensearch.cluster.dashboards=opensearch"
      fi
    }
{{- end -}}
