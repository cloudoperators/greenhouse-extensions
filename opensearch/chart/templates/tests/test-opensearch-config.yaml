{{- if .Values.testFramework.enabled -}}
# SPDX-FileCopyrightText: 2024 SAP SE or an SAP affiliate company and Greenhouse contributors
# SPDX-License-Identifier: Apache-2.0
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-test
  namespace: {{ .Release.Namespace }}
  labels:
    type: integration-test
    {{- include "opensearch-cluster-local.labels" . | nindent 4 }}
data:
  run.sh: |-

    #!/usr/bin/env bats

    load "/usr/lib/bats/bats-detik/utils"
    load "/usr/lib/bats/bats-detik/detik"

    DETIK_CLIENT_NAME="kubectl"

    @test "Verify successful deployment and running status of the operator pod" {
        try "at most 5 times every 5s to get pods named '{{ .Release.Name }}-operator-controller-manager-[a-z0-9]+-[a-z0-9]+' and verify that '.status.phase' is 'Running'"
    }

    @test "Verify successful deployment of the operator service" {
        verify "there is 1 service named '{{ .Release.Name }}-operator-controller-manager-metrics-service$'"
    }

    @test "Verify presence of OpenSearchCluster resource" {
      [ "$(kubectl get opensearchclusters.opensearch.opster.io -n {{ .Release.Namespace }} --no-headers | wc -l)" -ge 1 ]
    }

    @test "Verify presence of OpenSearchIndexTemplate resource" {
      [ "$(kubectl get opensearchindextemplates.opensearch.opster.io -n {{ .Release.Namespace }} --no-headers | wc -l)" -ge 1 ]
    }

    @test "Verify presence of OpenSearchRole resource" {
      [ "$(kubectl get opensearchroles.opensearch.opster.io -n {{ .Release.Namespace }} --no-headers | wc -l)" -ge 1 ]
    }

    @test "Verify presence of OpenSearchUser resource" {
      [ "$(kubectl get opensearchusers.opensearch.opster.io -n {{ .Release.Namespace }} --no-headers | wc -l)" -ge 1 ]
    }

    @test "Verify presence of OpenSearchUserRoleBinding resource" {
      [ "$(kubectl get opensearchuserrolebindings.opensearch.opster.io -n {{ .Release.Namespace }} --no-headers | wc -l)" -ge 1 ]
    }

    @test "Verify presence of OpenSearchISMPolicy resource" {
      [ "$(kubectl get opensearchismpolicies.opensearch.opster.io -n {{ .Release.Namespace }} --no-headers | wc -l)" -ge 1 ]
    }

    @test "Verify presence of OpenSearchComponentTemplate resource" {
      [ "$(kubectl get opensearchcomponenttemplates.opensearch.opster.io -n {{ .Release.Namespace }} --no-headers | wc -l)" -ge 1 ]
    }

    @test "Verify presence of OpenSearchTenant resource" {
      [ "$(kubectl get opensearchtenants.opensearch.opster.io -n {{ .Release.Namespace }} --no-headers | wc -l)" -ge 0 ]
    }

    @test "Verify OpenSearch main pod is running" {
        try "at most 5 times every 5s to get pods named '{{ .Release.Name }}-main-' and verify that '.status.phase' is 'Running'"
    }

    @test "Verify OpenSearch data pod is running" {
        try "at most 5 times every 5s to get pods named '{{ .Release.Name }}-data-' and verify that '.status.phase' is 'Running'"
    }

    @test "Verify OpenSearch client pod is running" {
        try "at most 5 times every 5s to get pods named '{{ .Release.Name }}-client-' and verify that '.status.phase' is 'Running'"
    }

    # The dashboards pod will not be scheduled if the ServiceMonitor CRD is missing. If the following test fails, please ensure the ServiceMonitor CRD is installed (e.g. via the kube-monitoring plugin).
    @test "Verify OpenSearch dashboards pod is running" {
        try "at most 5 times every 5s to get pods named '{{ .Release.Name }}-dashboards-' and verify that '.status.phase' is 'Running'"
    }

    @test "Verify OpenSearch main service exists" {
        try "at most 5 times every 5s to get services named '{{ .Release.Name }}-main' and verify that '.metadata.name' is '{{ .Release.Name }}-main'"
    }

    @test "Verify OpenSearch data service exists" {
        try "at most 5 times every 5s to get services named '{{ .Release.Name }}-data' and verify that '.metadata.name' is '{{ .Release.Name }}-data'"
    }

    @test "Verify OpenSearch client service exists" {
        try "at most 5 times every 5s to get services named '{{ .Release.Name }}-client' and verify that '.metadata.name' is '{{ .Release.Name }}-client'"
    }

{{- end -}}
