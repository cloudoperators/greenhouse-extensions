global:
  # -- Labels to add to all resources.
  # This can be used to add a `support_group` or `service` label to all resources and alerting rules.
  commonLabels: {}

perses:
  # Default values for perses.
  # This is a YAML-formatted file.
  # Declare variables to be passed into your templates.

  # -- Override name of the chart used in Kubernetes object names.
  nameOverride: ""

  # -- Override fully qualified app name
  fullnameOverride: ""

  # -- Image of Perses
  # @default -- <pre>image:<br>  name: "persesdev/perses"<br>  version: ""<br>  pullPolicy: IfNotPresent</pre>
  image:
    # -- Perses image repository and name
    name: "persesdev/perses"

    # -- Overrides the image tag whose default is the chart appVersion.
    version: ""

    # -- Default image pull policy
    pullPolicy: IfNotPresent

  additionalLabels:
    {}
    # app: perses

  # -- Service account for Perses to use.
  # @default -- <pre>serviceAccount:<br>  create: true<br>  annotations: {}<br>  name: ""</pre>
  serviceAccount:
    # -- Specifies whether a service account should be created
    create: true
    # -- Annotations to add to the service account
    annotations: {}
    # -- The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ""

  # -- Expose the Perses service to be accessed from outside the cluster (LoadBalancer service).
  # or access it from within the cluster (ClusterIP service). Set the service type and the port to serve it.
  # @default -- <pre>service:<br>  annotations: {}<br>  labels:<br>    greenhouse.sap/expose: "true"<br>  type: "ClusterIP"<br>  portName: http<br>  port: 8080<br>  targetPort: 8080</pre>
  service:
    # -- Annotations to add to the service
    annotations:
      greenhouse.sap/expose: "true"
    # -- Labeles to add to the service
    labels:
      greenhouse.sap/expose: "true"
    # -- Service Type
    type: "ClusterIP"
    # -- Service Port Name
    portName: http
    # -- Service Port
    port: 8080
    # -- Perses running port
    targetPort: 8080

  # @default -- <pre>serviceMonitor:<br>  selfMonitor: false<br>  labels: {}<br>  selector:<br>    matchLabels: {}<br>  interval: 30s</pre>
  serviceMonitor:
    # -- Create a serviceMonitor for Perses
    selfMonitor: false

    # -- Labels to add to the ServiceMonitor so that Prometheus can discover it.
    # These labels should match the 'serviceMonitorSelector.matchLabels' and `ruleSelector.matchLabels` defined in your Prometheus CR.
    labels: {}

    selector:
      # -- Selector used by the ServiceMonitor to find which Perses service to scrape metrics from.
      # These matchLabels should match the labels on your Perses service.
      matchLabels: {}

    # -- Interval for the serviceMonitor
    interval: 30s

  # -- Statefulset Annotations
  annotations: {}

  # -- Number of pod replicas.
  replicas: 1

  # -- Log level for Perses be configured in
  # available options "panic", "error", "warning", "info", "debug", "trace"
  logLevel: warning

  # -- Liveness probe configuration
  # Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
  # @default -- <pre>livenessProbe:<br>  enabled: true<br>  initialDelaySeconds: 10<br>  periodSeconds: 60<br>  timeoutSeconds: 5<br>  successThreshold: 1<br>  failureThreshold: 5</pre>
  livenessProbe:
    enabled: true
    initialDelaySeconds: 10
    periodSeconds: 60
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 5

  # -- Readiness probe configuration
  # Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
  # @default -- <pre>readinessProbe:<br>  enabled: true<br>  initialDelaySeconds: 5<br>  periodSeconds: 10<br>  timeoutSeconds: 5<br>  successThreshold: 1<br>  failureThreshold: 5</pre>
  readinessProbe:
    enabled: true
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 5

  # -- Additional volumes on the output StatefulSet definition.
  volumes: []

  # -- Additional VolumeMounts on the output StatefulSet definition.
  volumeMounts: []
  # -- TLS configuration for mounting certificates from Kubernetes secrets
  # @default -- <pre>tls:<br>  enabled: false<br>  caCert:<br>    enabled: false<br>    secretName: ""<br>    mountPath: "/ca"<br>  clientCert:<br>    enabled: false<br>    secretName: ""<br>    mountPath: "/tls"</pre>
  tls:
    # -- Enable TLS certificate mounting
    enabled: false

    # -- CA Certificate configuration
    # Certificates will be mounted to the directory specified in mountPath
    # @default -- <pre>caCert:<br>  enabled: false<br>  secretName: ""<br>  mountPath: "/ca"</pre>
    caCert:
      # -- Enable CA certificate mounting
      enabled: false
      # -- Name of the Kubernetes secret containing the CA certificate
      # Defaults to "release-name-tls" if not specified
      secretName: ""
      # -- Mount path for the CA certificate directory
      mountPath: "/ca"

    # -- Client Certificate configuration (contains both cert and key)
    # Certificates will be mounted to the directory specified in mountPath
    # @default -- <pre>clientCert:<br>  enabled: false<br>  secretName: ""<br>  mountPath: "/tls"</pre>
    clientCert:
      # -- Enable client certificate mounting
      enabled: false
      # -- Name of the Kubernetes secret containing the client certificate and key
      # Defaults to "release-name-tls" if not specified
      secretName: ""
      # -- Mount path for the client certificate directory
      mountPath: "/tls"
  # -- Resource limits & requests.
  # @default -- <pre>resources:<br>  limits:<br>    cpu: 250m<br>    memory: 500Mi<br>  requests:<br>    cpu: 250m<br>    memory: 500Mi</pre>
  # Update according to your own use case as these values might be too low for a typical deployment.
  # ref: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
  resources:
    limits:
      cpu: 250m
      memory: 500Mi
    requests:
      cpu: 250m
      memory: 500Mi

  # Perses configuration file
  # ref: https://github.com/perses/perses/blob/main/docs/user-guides/configuration.md
  config:
    # -- Annotations for config
    annotations: {}

    # With this config, the Perses app will be served with the path <api_prefix>/api
    api_prefix: "/perses"

    # @default -- <pre>security:<br>  readonly: false<br>  enable_auth: false<br>  cookie:<br>    same_site: lax<br>    secure: false</pre>
    security:
      # -- Configure Perses instance as readonly
      readonly: false
      # -- Enable Authentication
      enable_auth: false
      # -- cookie config
      # @default -- <pre>cookie:<br>  same_site: lax<br>  secure: false</pre>
      cookie:
        same_site: lax
        secure: false
        # [ same_site: < enum | possibleValue = 'strict' | 'lax' | 'none' > | default = lax ]
        # Set to true if you host Perses behind HTTPS. Default is false
        # [ secure: <boolean> | default = false ]

    frontend:
      # -- Information contains markdown content to be displayed on the Perses home page.
      information: "# Welcome to Perses!\n\n**Perses is now the default visualization plugin** for Greenhouse platform and will replace Plutono for the visualization of Prometheus and Thanos metrics.\n\n## Documentation\n\n- [Perses Official Documentation](https://perses.dev/)\n- [Perses Greenhouse Plugin Guide](https://cloudoperators.github.io/greenhouse/docs/reference/catalog/perses/)\n- [Create a Custom Dashboard](https://cloudoperators.github.io/greenhouse/docs/reference/catalog/perses/#create-a-custom-dashboard)"
      important_dashboards:
        []
        # - project: "perses"
        #   dashboard: "Demo"

    # -- Database configuration based on database type
    # @default -- <pre>database:<br>  file:<br>    folder: /perses<br>    extension: json</pre>
    database:
      # -- file system configs
      file:
        folder: /perses
        extension: json

    # -- provisioning config
    # @default -- <pre>provisioning:<br>  folders:<br>    - /etc/perses/provisioning<br>  interval: 3m</pre>
    provisioning:
      folders:
        - /etc/perses/provisioning
      interval: 3m

  # --  Sidecar configuration that watches for ConfigMaps with the specified label/labelValue and loads them into Perses provisioning
  # @default -- <pre>sidecar:<br>  enabled: true<br>  label: "perses.dev/resource"<br>  labelValue: "true"<br>  allNamespaces: true<br>  extraEnvVars: []<br>  enableSecretAccess: false</pre>
  sidecar:
    # -- Enable the sidecar container for ConfigMap provisioning
    enabled: true
    # -- Label key to watch for ConfigMaps containing Perses resources
    label: "perses.dev/resource"
    # -- Label value to watch for ConfigMaps containing Perses resources
    labelValue: "true"
    # -- check for configmaps from all namespaces. When set to false, it will only check for configmaps in the same namespace as the Perses instance
    allNamespaces: true
    # -- add additional environment variables to sidecar container. you can look at the k8s-sidecar documentation for more information - https://github.com/kiwigrid/k8s-sidecar
    extraEnvVars:
      []
      # - name: RESOURCE
      #   value: both
    # -- Enable secret access permissions in the cluster role. When enabled, the sidecar will have permissions to read secrets and use them.
    enableSecretAccess: false

  # -- Persistence parameters
  # @default -- <pre>persistence:<br>  enabled: false<br>  accessModes:<br>    - ReadWriteOnce<br>  size: 8Gi<br>  securityContext:<br>    fsGroup: 2000<br>  labels: {}<br>  annotations: {}</pre>
  persistence:
    # -- If disabled, it will use a emptydir volume
    enabled: false

    # -- Specify the `storageClass` to provision the volume for the PVC. If you don't specify a `storageClass`, a default `storageClass` will be used.
    # storageClass: ""

    # -- PVC Access Modes for data volume
    accessModes:
      - ReadWriteOnce

    # -- PVC Storage Request for data volume
    size: 8Gi

    # -- Security context for the PVC when persistence is enabled
    securityContext:
      fsGroup: 2000

    # -- Labels for the PVC
    labels: {}
    # -- Annotations for the PVC
    annotations: {}

  # -- Configure the ingress resource that allows you to access Perses Frontend
  # ref: https://kubernetes.io/docs/concepts/services-networking/ingress/
  # @default -- <pre>ingress:<br>  enabled: false<br>  hosts:<br>    - host: perses.local<br>      paths:<br>        - path: /<br>          pathType: Prefix<br>  ingressClassName: ""<br>  annotations: {}<br>  tls: []</pre>
  ingress:
    # -- Enable ingress controller resource
    enabled: false

    # -- Default host for the ingress resource
    # @default -- <pre>hosts:<br>  - host: perses.local<br>    paths:<br>      - path: /<br>        pathType: Prefix</pre>
    hosts:
      - host: perses.local
        paths:
          - path: /
            pathType: Prefix

    # -- IngressClass that will be be used to implement the Ingress (Kubernetes 1.18+)
    # This is supported in Kubernetes 1.18+ and required if you have more than one IngressClass marked as the default for your cluster .
    # ref: https://kubernetes.io/blog/2020/04/02/improvements-to-the-ingress-api-in-kubernetes-1.18/
    #
    ingressClassName: ""

    # -- Additional annotations for the Ingress resource. To enable certificate autogeneration, place here your cert-manager annotations.
    # For a full list of possible ingress annotations, please see
    # ref: https://github.com/kubernetes/ingress-nginx/blob/master/docs/user-guide/nginx-configuration/annotations.md
    annotations: {}

    # -- Ingress TLS configuration
    tls: []
  #    - secretName: ingress-cert
  #      hosts: []
  # -- Deploy extra K8s manifests
  extraObjects:
    []
    # - apiVersion: v1
    #   kind: ConfigMap
    #   metadata:
    #     name: 'truststore-{{ include "perses.fullname" . }}'
    #   data:
    #     ca.crt: |
    #       -----BEGIN CERTIFICATE-----
    #       -----END CERTIFICATE-----

greenhouse:
  defaultDashboards:
    # -- By setting this to true, You will get Perses Self-monitoring dashboards
    enabled: true

  # -- Labels to add to the PrometheusRules alerts.
  # @default -- <pre>alertLabels:<br>  support_group: "default"<br>  meta: ""</pre>
  alertLabels: {}
