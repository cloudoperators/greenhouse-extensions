{{/*
SPDX-FileCopyrightText: 2024 SAP SE or an SAP affiliate company and Greenhouse contributors
SPDX-License-Identifier: Apache-2.0
*/}}

{{- if .Values.openTelemetry.logsCollector.enabled }}
apiVersion: opentelemetry.io/v1beta1
kind: OpenTelemetryCollector
metadata:
  name: logs
  labels:
  {{- include "plugin.labels" . | nindent 4 }} 
  {{- if .Values.openTelemetry.customLabels }}
  {{ toYaml .Values.openTelemetry.customLabels | nindent 4 }}
  {{- end }}
spec:
  mode: daemonset
  tolerations:
  - operator: Exists
  env:
    - name: NAMESPACE
      valueFrom:
        fieldRef:
          fieldPath: metadata.namespace
    - name: KUBE_NODE_NAME
      valueFrom:
        fieldRef:
          fieldPath: spec.nodeName
    - name: MY_POD_IP
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: status.podIP
    - name: cluster
      value: "{{ .Values.openTelemetry.cluster }}"
    - name: region
      value: "{{ .Values.openTelemetry.region }}"
    - name: index
      value: "{{ .Values.openTelemetry.openSearchLogs.index }}"
  envFrom:
    - secretRef:
         name: otel-basic-auth
{{- if .Values.openTelemetry.prometheus.podMonitor.enabled }}
  ports:
    - name: prometheus
      port: 9999
{{- end }}
  image: {{ index .Values "logs-operator" "manager" "collectorImage" "repository" }}:{{ index .Values "logs-operator" "manager" "collectorImage" "tag" }}
  volumeMounts:
  - mountPath: /var/log
    name: varlog
    readOnly: true
  volumes:
  - name: varlog
    hostPath:
      path: /var/log
  config:
    receivers:
      journald:
        directory: /var/log/journal
        operators:
          - id: journal-label
            type: add
            field: attributes["log.type"]
            value: "journald"

      k8s_events:
        auth_type: serviceAccount

      filelog/containerd:
        include_file_path: true
        include: [ /var/log/pods/*/*/*.log ]
        exclude: [ /var/log/pods/otel_logs-*, /var/log/pods/logs_* ]
        operators:
          - id: container-parser
            type: container
          - id: parser-containerd
            type: add
            field: resource["container.runtime"]
            value: "containerd"
          - id: container-label
            type: add
            field: attributes["log.type"]
            value: "containerd"

{{- if .Values.openTelemetry.logsCollector.kvmConfig.enabled }}
    {{- include "kvm.receiver" . | nindent 6 -}}
{{- end }}

{{- if .Values.openTelemetry.prometheus.podMonitor.enabled }}
      prometheus/internal:
        config:
          scrape_configs:
            - job_name: 'internal'
              scrape_interval: 5s
              static_configs:
                - targets: ['127.0.0.1:8888']
{{- end }}

    processors:
      batch:
        send_batch_max_size: 500
        timeout: 5s
        send_batch_size : 10

{{- if .Values.openTelemetry.prometheus.podMonitor.enabled }}
      attributes/prometheus:
        actions:
          - action: insert
            key: k8s_node_name
            value: ${KUBE_NODE_NAME}
          - action: insert
            key: k8s_cluster_name
            value: ${cluster}
          - action: insert
            key: region
            value: ${region}
          - action: delete
            key: service_instance_id
          - action: delete
            key: pod
{{- end }}

      attributes/cluster:
        actions:
          - action: insert
            key: k8s.cluster.name
            value: ${cluster}
          - action: insert
            key: region
            value: ${region}
          - action: insert
            key: k8s.node.name
            value: ${KUBE_NODE_NAME}

      attributes/k8sevents:
        actions:
          - action: insert
            key: k8s.node.name
            value: ${KUBE_NODE_NAME}
          - key: k8s.namespace.name
            from_attribute: k8s.namespace.name
            action: insert
          - action: insert
            key: k8s.cluster.name
            value: ${cluster}
          - action: insert
            key: region
            value: ${region}
          - action: insert
            key: log.type
            value: "k8sevents"

      attributes/failover_username_a:
        actions:
          - action: insert
            key: failover_username_opensearch
            value: ${failover_username_a}
{{- if .Values.openTelemetry.logsCollector.failover.enabled }}
    {{- include "failover.attributes" . | nindent 6 -}}
{{- end }}


      transform/journal:
        error_mode: ignore
        log_statements:
          - context: log
            statements:
              - merge_maps(log.cache, body, "upsert") where IsMatch(log.body, "^\\{")
              - set(log.attributes["message"], log.cache["MESSAGE"])
              - set(log.attributes["code_file"], log.cache["CODE_FILE"])
              - set(log.attributes["code_func"], log.cache["CODE_FUNC"])
              - set(log.attributes["code_line"], log.cache["CODE_LINE"])
              - set(log.attributes["incovation_id"], log.cache["INVOCATION_ID"])
              - set(log.attributes["message_id"], log.cache["MESSAGE_ID"])
              - set(log.attributes["priority"], log.cache["PRIORITY"])
              - set(log.attributes["syslog_facility"], log.cache["SYSLOG_FACILITY"])
              - set(log.attributes["syslog_identifier"], log.cache["SYSLOG_IDENTIFIER"])
              - set(log.attributes["tid"], log.cache["TID"])
              - set(log.attributes["unit"], log.cache["UNIT"])
              - set(log.attributes["boot_id"], log.cache["_BOOT_ID"])
              - set(log.attributes["cao_effective"], log.cache["_CAP_EFFECTIVE"])
              - set(log.attributes["cmdline"], log.cache["_CMDLINE"])
              - set(log.attributes["exe"], log.cache["_EXE"])
              - set(log.attributes["gid"], log.cache["_GID"])
              - set(log.attributes["hostname"], log.cache["_HOSTNAME"])
              - set(log.attributes["machine_id"], log.cache["_MACHINE_ID"])
              - set(log.attributes["pid"], log.cache["_PID"])
              - set(log.attributes["runtime_scope"], log.cache["_RUNTIME_SCOPE"])
              - set(log.attributes["selinux_context"], log.cache["_SELINUX_CONTEXT"])
              - set(log.attributes["source_realtime_timestamp"], log.cache["_SOURCE_REALTIME_TIMESTAMP"])
              - set(log.attributes["systemd_cgroup"], log.cache["_SYSTEMD_CGROUP"])
              - set(log.attributes["systemd_slice"], log.cache["_SYSTEMD_SLICE"])
              - set(log.attributes["systemd_unit"], log.cache["_SYSTEMD_UNIT"])
              - set(log.attributes["transport"], log.cache["_TRANSPORT"])
              - set(log.attributes["uid"], log.cache["_UID"])
              - set(log.attributes["cursor"], log.cache["__CURSOR"])
              - set(log.attributes["monotonic_timestamp"], log.cache["__MONOTONIC_TIMESTAMP"])
              - delete_key(attributes, "log.cache")

      transform/ingress:
        error_mode: ignore
        log_statements:
          - context: log
            conditions:
              - resource.attributes["app.label.name"] == "ingress-nginx"
            statements:
              - merge_maps(log.attributes, ExtractGrokPatterns(log.body, "%{IP:client.address} %{NOTSPACE:client.ident} %{NOTSPACE:client.auth} \\[%{HTTPDATE:timestamp}\\] \"%{WORD:request_method} %{NOTSPACE:request_path} %{WORD:network.protocol.name}/%{NOTSPACE:network.protocol.version}\" %{NUMBER:response} %{NUMBER:content_length:int} %{QUOTEDSTRING} \"%{GREEDYDATA:user_agent}\" %{NUMBER:request_length:int} %{BASE10NUM:request_time:float}( \\[%{NOTSPACE:service}\\])? ?(\\[\\])? %{IP:server.address}\\:%{NUMBER:server.port} %{NUMBER:upstream_response_length:int} %{BASE10NUM:upstream_response_time:float} %{NOTSPACE:upstream_status} %{NOTSPACE:request_id}", true),"upsert")
              - set(log.attributes["network.protocol.name"], ConvertCase(attributes["network.protocol.name"], "lower")) where log.attributes["network.protocol.name"] != nil
              - set(log.attributes["config.parsed"], "ingress-nginx") where log.attributes["client.address"] != nil
{{- if .Values.openTelemetry.logsCollector.cephConfig.enabled }}
    {{- include "ceph.transform" . | nindent 6 -}}
{{- end }}

{{- if .Values.openTelemetry.logsCollector.kvmConfig.enabled }}
    {{- include "kvm.transform" . | nindent 6 -}}
{{- end }}

      k8sattributes:
        auth_type: "serviceAccount"
        passthrough: false
        filter:
          node_from_env_var: KUBE_NODE_NAME
        extract:
          metadata:
            - k8s.namespace.name
            - k8s.pod.name
            - k8s.pod.uid
            - k8s.pod.ip
            - k8s.pod.start_time
            - k8s.deployment.name
            - k8s.deployment.uid
            - k8s.node.name
            - k8s.replicaset.name
            - k8s.replicaset.uid
            - k8s.statefulset.name
            - k8s.statefulset.uid
            - k8s.daemonset.name
            - k8s.daemonset.uid
            - k8s.job.name
            - k8s.job.uid
            - k8s.cronjob.name
            - k8s.node.uid
            - k8s.cluster.uid
            - k8s.container.name
            - container.image.name
            - container.image.tag
          labels:
            - tag_name: app.label.ingress-nginx
              key: ingress-nginx
              from: pod
            - tag_name: app.label.support-group
              key: ccloud/support-group
              from: pod
            - tag_name: app.label.app_name
              key: app.kubernetes.io/app_name
              from: pod
            - tag_name: app.label.component
              key: app.kubernetes.io/component
              from: pod
            - tag_name: app.label.name
              key: app.kubernetes.io/name
              from: pod
            - tag_name: app.label.instance
              key: app.kubernetes.io/instance
              from: pod
            - tag_name: app.label.pod-template-hash
              key: app.kubernetes.io/pod-template-hash
              from: pod
{{- if .Values.openTelemetry.logsCollector.cephConfig.enabled }}
    {{- include "ceph.labels" . | nindent 12 -}}
{{- end }}
        pod_association:
          - sources:
              - from: resource_attribute
                name: k8s.pod.ip
          - sources:
              - from: resource_attribute
                name: k8s.pod.uid
          - sources:
              - from: resource_attribute
                name: k8s.pod.name
          - sources:
              - from: connection
      memory_limiter:
        check_interval: 5s
        limit_percentage: 80
        spike_limit_percentage: 30

    exporters:
      debug:
        verbosity: basic
      opensearch/failover_a:
        http:
          auth:
            authenticator: basicauth/failover_a
          endpoint: {{ .Values.openTelemetry.openSearchLogs.endpoint }}
        logs_index: ${index}-datastream
{{- if .Values.openTelemetry.logsCollector.failover.enabled }}
    {{- include "failover.exporter" . | nindent 6 -}}
{{- end }}
      prometheus:
        endpoint: 0.0.0.0:9999

    extensions:
      basicauth/failover_a:
        client_auth:
          username: ${failover_username_a}
          password: ${failover_password_a}
{{- if .Values.openTelemetry.logsCollector.failover.enabled }}
    {{- include "failover.extension" . | nindent 6 -}}
{{- end }}


    connectors:
      forward: {}
      failover:
        priority_levels:
          - [logs/failover_a]
{{- if .Values.openTelemetry.logsCollector.failover.enabled }}
          - [logs/failover_b]
{{- end }}
        retry_interval: 2m
        retry_gap: 30s
        max_retries: 0
    service:
      extensions:
        - basicauth/failover_a
{{- if .Values.openTelemetry.logsCollector.failover.enabled }}
        - basicauth/failover_b
{{- end }}
{{- if .Values.openTelemetry.prometheus.podMonitor.enabled }}
      telemetry:
        metrics:
          level: detailed
          readers:
          - pull:
              exporter:
                prometheus:
                  host: 0.0.0.0
                  port: 8888
{{- end }}
      pipelines:
        logs/forward:
          receivers: [forward]
          processors: [batch]
          exporters: [failover]
        logs/failover_a:
          receivers: [failover]
          processors: [attributes/failover_username_a]
          exporters: [opensearch/failover_a]
{{- if .Values.openTelemetry.logsCollector.failover.enabled }}
    {{- include "failover.pipeline" . | nindent 8 -}}
{{- end }}
{{- if not (or .Values.openTelemetry.logsCollector.kvmConfig.enabled .Values.openTelemetry.logsCollector.cephConfig.enabled) }}
        logs/containerd:
          receivers: [filelog/containerd]
          processors: [k8sattributes,attributes/cluster,transform/ingress]
          exporters: [forward]
{{- end }}
{{- if .Values.openTelemetry.logsCollector.kvmConfig.enabled }}
    {{- include "kvm.pipeline" . | nindent 8 -}}
{{- end }}
{{- if .Values.openTelemetry.logsCollector.cephConfig.enabled }}
    {{- include "ceph.pipeline" . | nindent 8 -}}
{{- end }}
        logs/k8sevents:
          receivers: [k8s_events]
          processors: [attributes/k8sevents]
          exporters: [forward]
        logs/journald:
          receivers: [journald]
          processors: [attributes/cluster,transform/journal]
          exporters: [forward]
{{- if .Values.openTelemetry.prometheus.podMonitor.enabled }}
        metrics/prometheus:
          receivers: [prometheus/internal]
          processors: [attributes/prometheus]
          exporters: [prometheus]
{{- end }}
{{- end }}
