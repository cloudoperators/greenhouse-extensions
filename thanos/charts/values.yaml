# SPDX-FileCopyrightText: 2024 SAP SE or an SAP affiliate company and Greenhouse contributors
# SPDX-License-Identifier: Apache-2.0

global:
  # -- Labels to apply to all resources
  # @default -- the chart will add some internal labels automatically
  commonLabels: {}

  # -- Overrides the registry globally for all images
  imageRegistry: null

thanos:
  image:
    # -- Thanos image repository
    repository: quay.io/thanos/thanos
    # -- Thanos image tag
    tag: v0.39.2
    # -- Thanos image pull policy
    pullPolicy: IfNotPresent

  # -- GRPC-address used across the stack
  # @default -- 0.0.0.0:10901
  grpcAddress:

  # -- HTTP-address used across the stack
  # @default -- 0.0.0.0:10902
  httpAddress:


  existingObjectStoreSecret:
    # -- Use existing objectStorageConfig Secret data and configure it to be used by Thanos Compactor and Store
    # https://thanos.io/tip/thanos/storage.md/#s3
    # @default -- {{ include "release.name" . }}-metrics-objectstore
    name:
    # -- Object store config file name
    # @default -- thanos.yaml
    configFile:

  serviceMonitor:
    # -- Create a ServiceMonitor and PrometheusRules for Thanos components. Disabled by default since label is required for Prometheus
    # serviceMonitorSelector/ruleSelector.
    selfMonitor: false

    # -- Labels to add to the ServiceMonitor/PrometheusRules. Make sure label is matching your Prometheus serviceMonitorSelector/ruleSelector configs
    # by default Greenhouse kube-monitoring follows this label pattern `plugin: "{{ $.Release.Name }}"`
    labels: {}

    # -- Labels to add to the PrometheusRules alerts.
    # @default -- <pre> alertLabels: \| <br>   support_group: "default" <br>   meta: "" </pre>
    alertLabels: ""
      # support_group: "default"

    # -- Create configmaps containing Perses dashboards
    dashboards: true

  # @ignored
  # Init container to set permissions
  initChownData:
    # initChownData container image
    image:
      # -- The Docker registry
      registry: docker.io
      repository: library/busybox
      tag: "stable"
      sha: ""

  query:
    # -- Enable Thanos Query component
    enabled: true

    # -- Number of Thanos Query replicas to deploy
    replicas:

    # -- Thanos Query log level
    # @default -- info
    logLevel:

    # Disables standard prometheus-operated and Thanos Store endpoints
    # To be used for overarching Thanos Queries with custom endpoint lists
    standalone: false

    # -- Set Thanos Query auto-downsampling
    autoDownsampling: true

    # -- Set Thanos Query replica-label for Prometheus replicas
    replicaLabel: prometheus_replica

    web:
      externalPrefix:
      routePrefix:

    # -- Resource requests and limits for the Thanos Query container.
    # @default -- <pre>ressources:<br>  requests:<br>    memory:<br>    cpu:<br>  limits:<br>    memory:<br>    cpu:<br></pre>
    resources:
      requests:
        cpu:
        memory:
      limits:
        cpu:
        memory:

    # -- Adding additional arguments to Thanos Query
    additionalArgs: []
      # - something.route-foo=/lol

    # -- Labels to add to the Thanos Query deployment
    deploymentLabels: {}

    # -- Labels to add to the Thanos Query container
    containerLabels: {}

    # -- Labels to add to the Thanos Query service
    serviceLabels: {}

    # -- Annotations to add to the Thanos Query resources
    annotations: {}

    # if this is a standalone query, store endpoints need to be added here, otherwise the query does nothing.
    stores: []

    # Configure the ingress resource that allows you to access Thanos Query
    # ref: https://kubernetes.io/docs/concepts/services-networking/ingress/
    ingress:
      # -- Enable ingress controller resource
      enabled: false

      # -- Default host for the ingress resource
      hosts:
        - host: thanos.local
          paths:
            - path: /
              pathType: Prefix

      # -- IngressClass that will be be used to implement the Ingress (Kubernetes 1.18+)
      # This is supported in Kubernetes 1.18+ and required if you have more than one IngressClass marked as the default for your cluster .
      # ref: https://kubernetes.io/blog/2020/04/02/improvements-to-the-ingress-api-in-kubernetes-1.18/
      #
      ingressClassName: ""

      # -- Additional annotations for the Ingress resource. To enable certificate autogeneration, place here your cert-manager annotations.
      # For a full list of possible ingress annotations, please see
      # ref: https://github.com/kubernetes/ingress-nginx/blob/master/docs/user-guide/nginx-configuration/annotations.md
      annotations: {}

      # -- Ingress TLS configuration
      tls: []
      #    - secretName: ingress-cert
      #      hosts: []
      # Create an ingress object for the GRPC service
      grpc:
        # -- Enable ingress controller resource.(GRPC)
        enabled: false

        # -- Default host for the ingress resource.(GRPC)
        hosts:
          - host: thanos.local
            paths:
              - path: /
                pathType: Prefix

        # -- IngressClass that will be be used to implement the Ingress (Kubernetes 1.18+)(GRPC)
        # This is supported in Kubernetes 1.18+ and required if you have more than one IngressClass marked as the default for your cluster .
        # ref: https://kubernetes.io/blog/2020/04/02/improvements-to-the-ingress-api-in-kubernetes-1.18/
        #
        ingressClassName: ""

        # -- Additional annotations for the Ingress resource.(GRPC) To enable certificate autogeneration, place here your cert-manager annotations.
        # For a full list of possible ingress annotations, please see
        # ref: https://github.com/kubernetes/ingress-nginx/blob/master/docs/user-guide/nginx-configuration/annotations.md
        annotations: {}

        # -- Ingress TLS configuration. (GRPC)
        tls: []
        #    - secretName: ingress-cert
        #      hosts: []

    # used for cross cluster TLS
    tls:
      ## Use existing Secret in the same namespace containing the certificates and private keys
      ## This will take precedence
      secretName: ""

      ## Specify certificates and private keys
      data: {}
        # caCert:
        # tlsCert:
        # tlsKey:

    ## Expose Thanos Query as a Plutono datasource
    plutonoDatasource:
      # -- Creates a Perses datasource for standalone Thanos Query
      create: false

      # -- set datasource as default for Plutono
      isDefault: false

      # -- Label selectors for the Plutono sidecar to detect this datasource.
      selector: {}
        # plutono-global: '"true"'

    ## Expose Thanos Query as a Perses datasource
    ##
    persesDatasource:
      # -- Creates a Perses datasource for Thanos Query
      create: true

      # -- set datasource as default for Perses. Consider setting this to `false` only if you have another (default) datasource for Perses already.
      isDefault: true

      # -- Label selectors for the Perses sidecar to detect this datasource.
      selector: {}
        # perses-global: '"true"'

  store:
    # -- Enable Thanos Store component
    enabled: true

    # -- Resource requests and limits for the Thanos Store container.
    # @default -- <pre>ressources:<br>  requests:<br>    memory:<br>    cpu:<br>  limits:<br>    memory:<br>    cpu:<br></pre>
    resources:
      requests:
        cpu:
        memory:
        ephemeral-storage: 200Mi
      limits:
        cpu:
        memory:

    # -- Adding additional arguments to Thanos Store
    additionalArgs: []

    # -- Labels to add to the Thanos Store deployment
    deploymentLabels: {}

    # -- Labels to add to the Thanos Store container
    containerLabels: {}

    # -- Labels to add to the Thanos Store service
    serviceLabels: {}

    # -- Annotations to add to the Thanos Store resources
    annotations: {}

    # -- Set Thanos Store chunk-pool-size
    # @default -- 4GB
    chunkPoolSize:

    # -- Set Thanos Store index-cache-size
    # @default -- 1GB
    indexCacheSize:

    # -- Thanos Store log level
    # @default -- info
    logLevel:

  compactor:
    # -- Enable Thanos Compactor component
    enabled: true

    # TODO: store secret needs to be present and can not be provisioned automatically

    # -- Thanos Compactor log level
    # @default -- info
    logLevel:

    # -- Resource requests and limits for the Thanos Compactor container.
    # @default -- <pre>ressources:<br>  requests:<br>    memory:<br>    cpu:<br>  limits:<br>    memory:<br>    cpu:<br></pre>
    resources:
      requests:
        cpu:
        memory:
      limits:
        cpu:
        memory:

    # -- Labels to add to the Thanos Compactor deployment
    deploymentLabels: {}

    # -- Labels to add to the Thanos Compactor container
    containerLabels: {}

    # -- Labels to add to the Thanos Compactor service
    serviceLabels: {}

    # -- Annotations to add to the Thanos Compactor resources
    annotations: {}

    # -- Adding additional arguments to Thanos Compactor
    additionalArgs: []

    # -- Set Thanos Compactor http-grace-period
    # @default -- 120s
    httpGracePeriod:

    # -- Set Thanos Compactor consistency-delay
    # @default -- 1800s
    consistencyDelay:

    # -- Set Thanos Compactor retention.resolution-raw
    # @default -- 7776000s
    retentionResolutionRaw:
    # -- Set Thanos Compactor retention.resolution-5m
    # @default -- 7776000s
    retentionResolution5m:
    # -- Set Thanos Compactor retention.resolution-1h
    # @default -- 157680000s
    retentionResolution1h:

    compact:
      # -- Set Thanos Compactor compact.concurrency
      # @default -- 1
      concurrency:

      # -- Set Thanos Compactor compact.cleanup-interval
      # @default -- 1800s
      cleanupInterval:

      # -- Set Thanos Compactor wait-interval
      # @default -- 900s
      waitInterval:

    volume:
      # -- Set Thanos Compactor PersistentVolumeClaim size in Gi
      # @default -- 100Gi
      size:

      # -- Labels to add to the Thanos Compactor PVC resource
      labels: []

  ruler:
    # -- Enable Thanos Ruler components
    enabled: false

    # -- Set Thanos Ruler replica count
    replicas: 1

    # -- Annotations to add to the Thanos Ruler resources
    annotations: {}

    # -- Set Thanos Ruler external prefix
    externalPrefix: /ruler

    # -- Labels to add to the ThanosRuler CustomResource
    labels: {}

    # -- Labels to add to the Thanos Ruler service
    serviceLabels: {}

    # -- Set Thanos Rule replica-label. Only change this when you also guarantee to add the same as an external label with a value of `"$(POD_NAME)"`
    replicaLabel: thanos_ruler_replica

    # -- PrometheusRule objects to be selected for rule evaluation
    matchLabel:

    # -- Interval between consecutive evaluations.
    evaluationInterval: 30s

    # -- Time duration ThanosRuler shall retain data for. Default is ‘24h’, and must match the regular expression [0-9]+(ms|s|m|h|d|w|y) (milliseconds seconds minutes hours days weeks years).
    retention: 24h

    # -- External Labels to add to the Thanos Ruler (A default replica label `thanos_ruler_replica` will be always added as a label with the value of the pod’s name.)
    externalLabels: {}

    ## -- Storage is the definition of how storage will be used by the ThanosRuler instances.
    storage: {}
    # volumeClaimTemplate:
    #   spec:
    #     storageClassName: default
    #     accessModes: ["ReadWriteOnce"]
    #     resources:
    #       requests:
    #         storage: 50Gi
    #     selector: {}

    ## -- ObjectStorageConfig configures object storage in Thanos
    objectStorageConfig:
      # use existing secret, see https://thanos.io/tip/thanos/storage.md/#s3
      existingSecret: {}
        # name: kube-monitoring-prometheus
        # key: object-storage-configs.yaml

    # -- Resource requests and limits for the Thanos Ruler container.
    # @default -- <pre>ressources:<br>  requests:<br>    memory:<br>    cpu:<br>  limits:<br>    memory:<br>    cpu:<br></pre>
    resources:
      requests:
        cpu:
        memory:
      limits:
        cpu:
        memory:

    # -- SecurityContext holds pod-level security attributes and common container settings.
    securityContext:
      fsGroup: 2000
      runAsGroup: 2000
      runAsNonRoot: true
      runAsUser: 1000
      seccompProfile:
        type: RuntimeDefault

    # -- Thanos Ruler log level
    # @default -- info
    logLevel:

    # -- Configures the list of Alertmanager endpoints to send alerts to.
    # The configuration format is defined at https://thanos.io/tip/components/rule.md/#alertmanager.
    # @default -- nil
    alertmanagers:
      # -- Enable Thanos Ruler Alertmanager config
      enabled: true
      authentication:
        # -- Enable Alertmanager authentication for Thanos Ruler
        enabled: true
        # -- SSO Cert for Alertmanager authentication
        ssoCert:
        # -- SSO Key for Alertmanager authentication
        ssoKey:
      # -- List of hosts endpoints to send alerts to
      hosts:

  # -- Deploy extra K8s manifests
  extraObjects:
    []
    # - apiVersion: v1
    #   kind: ConfigMap
    #   metadata:
    #     name: '{{ include "release.name" . }}-truststore'
    #   data:
    #     ca.crt: |
    #       -----BEGIN CERTIFICATE-----
    #       -----END CERTIFICATE-----

blackboxExporter:
# -- Enable creation of Blackbox exporter resources for probing Thanos stores. It will create ServiceMonitor and PrometheusRule CR
# to probe store endpoints provided to the helm release (thanos.query.stores) <br>
# Make sure Blackbox exporter is enabled in kube-monitoring plugin and that it uses same TLS secret as the Thanos instance.
  enabled: false

# @ignored
testFramework:
  # -- Enable Thanos test framework
  enabled: true
  image:
    registry: ghcr.io
    repository: cloudoperators/greenhouse-extensions-integration-test
    tag: v0.0.1
  imagePullPolicy: IfNotPresent

# @ignored
# Only used for TESTING !!! see test-values.yaml
# The kube-monitoring plugin is taking care of deploying the Prometheus Operator
# Thanos Plugin leverages it for its CI
ci:
  enabled: false
