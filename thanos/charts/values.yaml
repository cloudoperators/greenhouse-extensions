# SPDX-FileCopyrightText: 2024 SAP SE or an SAP affiliate company and Greenhouse contributors
# SPDX-License-Identifier: Apache-2.0

global:
  clusterType:

  region:
  ## Labels to apply to all resources
  ##
  commonLabels: {}

# Create RBAC resources.
rbac:
  create: true

# ServiceAccount to use for the Thanos.
# Note that a ServiceAccount with name `default` cannot be created.
# Instead the generated name will be used.
serviceAccount:
  create: true

ruler:
  enabled: true

  annotations:

  deploymentLabels: {} 

  serviceLabels:
  
  paused:

  logLevel:

  externalPrefix:

  evaluationInterval:

  externalClusterLabels:
    enabled:

  alertmanagers:
    hosts:
    authentication:
      enabled:
  
  queryEndpoints:

  queries:
  
  additionalFlags:

  resources:

  externalUrl: "https://"

  retention: true
  image:
    pullPolicy: "IfNotPresent"

thanos:
  image:
    repository: quay.io/thanos/thanos
    # defaults to .Chart.appVersion
    tag:
    # defaults to IfNotPresent
    pullPolicy: 
  grpcAddress:
  # used across the stack 
  httpAddress:

  query:
    replicas:
    # defaults to info
    logLevel:

    # Disables standard prometheus-operated and Thanos Store endpoints
    # To be used for overarching Thanos Queries with custom endpoint lists
    standalone: false

    # arguments in general
    autoDownsampling: true
    replicaLabels:

    web:
      externalPrefix:
      routePrefix:

    additionalArgs: []
      #- something.route-foo=/lol 

    deploymentLabels: {} 

    containerLabels:

    serviceLabels:

    annotations:

    stores: [] 

  store:
    # adding additional arguments
    additionalArgs: []

    deploymentLabels: {} 

    containerLabels:

    #TODO use
    serviceLabels:

    annotations:

  compactor:
    # if this is a standalone Thanos Query, we wouldn't want a compactor
    enabled: true
    # TODO: store secret needs to be present and can not be provisioned automatically
    
    logLevel:

    containerLabels: []

    serviceLabels:

    labels: []
    annotations: []
 
    # adding additional arguments
    additionalArgs: []

    httpGracePeriod:
    consistencyDelay:

    # retention values in seconds
    retentionResolutionRaw:
    retentionResolution5m:
    retentionResolution1h:

    compact:
      # int
      concurrency:

      # seconds
      cleanupInterval:

      # seconds 
      waitInterval:

    volume:
      # bool
      enabled:
      # GiB
      size:
      labels: []

testFramework:
  enabled: true
  image:
    registry: ghcr.io
    repository: cloudoperators/greenhouse-extensions-integration-test
    tag: main
  imagePullPolicy: IfNotPresent
