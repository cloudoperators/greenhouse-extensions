# SPDX-FileCopyrightText: 2024 SAP SE or an SAP affiliate company and Greenhouse contributors
# SPDX-License-Identifier: Apache-2.0

global:
  ## Labels to apply to all resources
  commonLabels: {}

thanos:
  image:
    repository: quay.io/thanos/thanos
    # defaults to .Chart.appVersion
    tag:
    # defaults to IfNotPresent
    pullPolicy:
  grpcAddress:
  # used across the stack
  httpAddress:

  query:
    replicas:
    # defaults to info
    logLevel:

    # Disables standard prometheus-operated and Thanos Store endpoints
    # To be used for overarching Thanos Queries with custom endpoint lists
    standalone: false

    # arguments in general
    autoDownsampling: true
    replicaLabels:

    web:
      externalPrefix:
      routePrefix:

    additionalArgs: []
      # - something.route-foo=/lol
    deploymentLabels: {}
    containerLabels:

    serviceLabels:

    annotations:

    stores: []

  store:
    # adding additional arguments
    additionalArgs: []

    deploymentLabels: {}

    containerLabels:

    # TODO use
    serviceLabels:

    annotations:

    chunkPoolSize:

    indexCacheSize:

    logLevel:

  compactor:
    # if this is a standalone Thanos Query, we wouldn't want a compactor
    enabled: true
    # TODO: store secret needs to be present and can not be provisioned automatically
    logLevel:

    containerLabels: []

    serviceLabels:

    labels: []
    annotations: []

    # adding additional arguments
    additionalArgs: []

    httpGracePeriod:
    consistencyDelay:

    # retention values in seconds
    retentionResolutionRaw:
    retentionResolution5m:
    retentionResolution1h:

    compact:
      # int
      concurrency:

      # seconds
      cleanupInterval:

      # seconds
      waitInterval:

    volume:
      # bool
      enabled:
      # GiB
      size:
      labels: []

  ruler:
    enabled: true
    labels:

    alertLabels:

# kube-prometheus-stack configuration scoped to thanos ruler
prometheus-operator:
  ## Create default rules for monitoring the cluster
  defaultRules:
    create: false
    rules:
      alertmanager: false
      etcd: false
      configReloaders: false
      general: false
      k8sContainerCpuUsageSecondsTotal: false
      k8sContainerMemoryCache: false
      k8sContainerMemoryRss: false
      k8sContainerMemorySwap: false
      k8sContainerResource: false
      k8sPodOwner: false
      kubeApiserverAvailability: false
      kubeApiserverBurnrate: false
      kubeApiserverHistogram: false
      kubeApiserverSlos: false
      kubeControllerManager: false
      kubelet: false
      kubeProxy: false
      kubePrometheusGeneral: false
      kubePrometheusNodeRecording: false
      kubernetesApps: false
      kubernetesResources: false
      kubernetesStorage: false
      kubernetesSystem: false
      kubeSchedulerAlerting: false
      kubeSchedulerRecording: false
      kubeStateMetrics: false
      network: false
      node: false
      nodeExporterAlerting: false
      nodeExporterRecording: false
      prometheus: false
      prometheusOperator: false
      windows: false

  ## Create curated dashboards for generic monitoring (e.g. monitoring Alertmanager)
  dashboards:
    create: false

  ## Flag to disable all the kubernetes component scrapers
  kubernetesServiceMonitors:
    enabled: false

  ## Setting to true produces cleaner resource names, but requires a data migration because the name of the persistent volume changes. Therefore this should only be set once on initial installation.
  cleanPrometheusOperatorObjectNames: false

  ## Install Prometheus Operator CRDs
  crds:
    enabled: false

  windowsMonitoring:
  ## Deploys the windows-exporter and Windows-specific dashboards and rules (job name must be 'windows-exporter')
    enabled: false

  ## Using default values from https://github.com/grafana/helm-charts/blob/main/charts/grafana/values.yaml
  grafana:
    enabled: false

  ## Configuration for thanosRuler
  ## ref: https://thanos.io/tip/components/rule.md/
  thanosRuler:
    ## Deploy thanosRuler
    enabled: false

  ## Configuration for the Prometheus instance
  prometheus:
    ## Deploy Prometheus
    enabled: false

  ## Deploy node exporter as a daemonset to all nodes
  nodeExporter:
    ## Deploy prometheus node-exporter
    enabled: false

  ## Component scraping kube state metrics
  kubeStateMetrics:
    ## Deploy kube-state-metrics subchart
    enabled: false

  ## Manages Prometheus and Alertmanager components
  prometheusOperator:
    ## Deploy prometheus-operator
    enabled: false

  ## Configuration for alertmanager
  ## ref: https://prometheus.io/docs/alerting/alertmanager/
  alertmanager:
    ## Deploy alertmanager
    enabled: false
    ingress:
      enabled: false

testFramework:
  enabled: true
  image:
    registry: ghcr.io
    repository: cloudoperators/greenhouse-extensions-integration-test
    tag: main
  imagePullPolicy: IfNotPresent
  ## Configuration for CI pipeline
  ci:
    enabled: false
