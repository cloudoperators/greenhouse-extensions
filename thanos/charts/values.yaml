# SPDX-FileCopyrightText: 2024 SAP SE or an SAP affiliate company and Greenhouse contributors
# SPDX-License-Identifier: Apache-2.0

global:
  # -- Labels to apply to all resources
  # @default -- the chart will add some internal labels automatically
  commonLabels: {}

  # -- Overrides the registry globally for all images
  imageRegistry: null

thanos:
  image:
    repository: quay.io/thanos/thanos
    # defaults to .Chart.appVersion
    tag: v0.37.2
    # defaults to IfNotPresent
    pullPolicy:
  grpcAddress:
  # used across the stack
  httpAddress:

  serviceMonitor:
    ## If true, create a serviceMonitor for Thanos components
    ##
    selfMonitor: true

    ## Labels for ServiceMonitor
    additionalLabels: {}


  ## Init container to set permissions
  initChownData:

    ## initChownData container image
    ##
    image:
      # -- The Docker registry
      registry: docker.io
      repository: library/busybox
      tag: "stable"
      sha: ""

  query:
    replicas:
    # defaults to info
    logLevel:

    # Disables standard prometheus-operated and Thanos Store endpoints
    # To be used for overarching Thanos Queries with custom endpoint lists
    standalone: false

    # arguments in general
    autoDownsampling: true
    replicaLabels:

    web:
      externalPrefix:
      routePrefix:

    additionalArgs: []
      # - something.route-foo=/lol

    deploymentLabels: {}

    containerLabels:

    serviceLabels:

    annotations:

    # if this is a standalone query, store endpoints need to be added here, otherwise the query does nothing.
    stores: []

    # Configure the ingress resource that allows you to access Thanos Query 
    # ref: https://kubernetes.io/docs/concepts/services-networking/ingress/
    ingress:
      # Create an ingress object for the GRPC service
      grpc:
        # -- Enable ingress controller resource
        enabled: false

        # -- Default host for the ingress resource
        hosts:
          - host: thanos.local
            paths:
              - path: /
                pathType: Prefix

        # -- IngressClass that will be be used to implement the Ingress (Kubernetes 1.18+)
        # This is supported in Kubernetes 1.18+ and required if you have more than one IngressClass marked as the default for your cluster .
        # ref: https://kubernetes.io/blog/2020/04/02/improvements-to-the-ingress-api-in-kubernetes-1.18/
        #
        ingressClassName: ""

        # -- Additional annotations for the Ingress resource. To enable certificate autogeneration, place here your cert-manager annotations.
        # For a full list of possible ingress annotations, please see
        # ref: https://github.com/kubernetes/ingress-nginx/blob/master/docs/user-guide/nginx-configuration/annotations.md
        annotations: {}

        # -- Ingress TLS configuration
        tls: []
      #    - secretName: ingress-cert
      #      hosts: []
      
    # used for cross cluster TLS
    tls:
      ## Use existing Secret in the same namespace containing the certificates and private keys
      ## This will take precedence
      secretName: ""

      ## Specify certificates and private keys
      data: {}
        # caCert:
        # tlsCert:
        # tlsKey:

  store:
    # if this is a standalone Thanos Query, we wouldn't want a store.
    enabled: true
    # adding additional arguments
    additionalArgs: []

    deploymentLabels: {}

    containerLabels:

    # TODO use
    serviceLabels:

    annotations:

    chunkPoolSize:

    indexCacheSize:

    logLevel:

  compactor:
    # if this is a standalone Thanos Query, we wouldn't want a compactor
    enabled: true
    # TODO: store secret needs to be present and can not be provisioned automatically

    logLevel:

    containerLabels: []

    serviceLabels:

    labels: []
    annotations: []

    # adding additional arguments
    additionalArgs: []

    httpGracePeriod:
    consistencyDelay:

    # retention values in seconds
    retentionResolutionRaw:
    retentionResolution5m:
    retentionResolution1h:

    compact:
      # int
      concurrency:

      # seconds
      cleanupInterval:

      # seconds
      waitInterval:

    volume:
      # bool
      enabled:
      # GiB
      size:
      labels: []

  ruler:
    enabled: true

    annotations:

    externalPrefix: /ruler

    labels:

    alertLabels:

    matchLabel:

    serviceLabels:

    alertmanagers:
      enabled: true
      authentication:
        enabled: true
        ssoCert:
        ssoKey:
      hosts:

testFramework:
  enabled: true
  image:
    registry: ghcr.io
    repository: cloudoperators/greenhouse-extensions-integration-test
    tag: main
  imagePullPolicy: IfNotPresent

# @ignored
# Only used for TESTING !!! see test-values.yaml
# The kube-monitoring plugin is taking care of deploying the Prometheus Operator
# Thanos Plugin leverages it for its CI
ci:
  enabled: false
# @ignored
prometheus-operator:
  defaultRules:
    create: false
  dashboards:
    create: false
  kubernetesServiceMonitors:
    enabled: false
  cleanPrometheusOperatorObjectNames: false
  crds:
    enabled: false
  windowsMonitoring:
    enabled: false
  grafana:
    enabled: false
  thanosRuler:
    enabled: false
  prometheus:
    enabled: false
  nodeExporter:
    enabled: false
  kubeStateMetrics:
    enabled: false
  prometheusOperator:
    enabled: false
  alertmanager:
    enabled: false
    ingress:
      enabled: false
