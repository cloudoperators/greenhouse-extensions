{{- if .Values.testFramework.enabled -}}
# SPDX-FileCopyrightText: 2024 SAP SE or an SAP affiliate company and Greenhouse contributors
# SPDX-License-Identifier: Apache-2.0
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-test
  namespace: {{ .Release.Namespace }}
  labels:
    type: integration-test
  annotations:
    "helm.sh/hook": test
    "helm.sh/hook-weight": "-5" # Installed and upgraded before the test pod
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded"
data:
  run.sh: |-

    #!/usr/bin/env bats

    load "/usr/lib/bats/bats-detik/utils"
    load "/usr/lib/bats/bats-detik/detik"

    DETIK_CLIENT_NAME="kubectl"

    @test "Verify {{ .Release.Name }} Query" {
      verify "there is 1 deployment named '{{ .Release.Name }}-query'"
      verify "there is 1 service named '{{ .Release.Name }}-query'"
      try "at most 4 times every 5s to get pods named '{{ .Release.Name }}-query' and verify that '.status.phase' is 'running'"
    }

    {{ if and .Values.thanos.store.enabled (not .Values.thanos.query.standalone) }}
    @test "Verify {{ .Release.Name }} Store" {
      verify "there is 1 deployment named '{{ .Release.Name }}-store'"
      verify "there is 1 service named '{{ .Release.Name }}-store'"
      try "at most 4 times every 5s to get pods named '{{ .Release.Name }}-store' and verify that '.status.phase' is 'running'"
    }
    {{ end }}

    {{ if and .Values.thanos.compactor.enabled (not .Values.thanos.query.standalone) }}
    @test "Verify {{ .Release.Name }} Compactor" {
      verify "there is 1 deployment named '{{ .Release.Name }}-compactor'"
      verify "there is 1 service named '{{ .Release.Name }}-compactor'"
      try "at most 3 times every 5s to get pods named '{{ .Release.Name }}-compactor' and verify that '.status.phase' is 'running'"
      try "at most 3 times every 5s to get persistentvolumeclaims named '{{ .Release.Name }}-compactor' and verify that '.status.phase' is 'Bound'"
    }
    {{ end }}

    {{ if and .Values.thanos.ruler.enabled (not .Values.thanos.query.standalone) }}
    @test "Verify succesful creation, running status and rulefiles population of Thanos Ruler" {
      verify "there is 1 statefulset named 'thanos-ruler-{{ .Release.Name }}'"
      verify "there is 1 service named 'thanos-ruler-operated'"
      try "at most 3 times every 5s to get pods named 'thanos-ruler-{{ .Release.Name }}' and verify that '.status.phase' is 'running'"
      try "at most 3 times every 5s to get configmaps named '.*(ruler)+.*(rulefiles)+.*' and verify that '.data' matches '.*yaml.*'"
    }
    {{ end }}

    {{ if .Values.thanos.serviceMonitor.selfMonitor }}
    @test "Verify succesful creation of ServiceMonitor" {
      verify "there is 1 servicemonitor named '{{ .Release.Name }}'"
    }
    {{ end }}
{{- end -}}
