{{/*
SPDX-FileCopyrightText: 2024 SAP SE or an SAP affiliate company and Greenhouse contributors
SPDX-License-Identifier: Apache-2.0
*/}}

apiVersion: opentelemetry.io/v1beta1
kind: OpenTelemetryCollector
metadata:
  name: audit-logs
  labels:
  {{- include "plugin.labels" . | nindent 4 }} 
  {{- if .Values.openTelemetryPlugin.auditLogs.customLabels }}
  {{ toYaml .Values.openTelemetryPlugin.auditLogs.customLabels | nindent 4 }}
  {{- end }}
spec:
  hostPID: true
  securityContext:
    privileged: true
    runAsUser: 0
    capabilities:
      add:
        # Capabilities needed for auditd
        - 'AUDIT_READ'
        - 'AUDIT_WRITE'
        - 'AUDIT_CONTROL'
  mode: daemonset
  tolerations:
  - operator: Exists
  podAnnotations:
    kubectl.kubernetes.io/default-container: "otc-container"
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: cloud.sap/deployment-state
            operator: NotIn
            values:
            - reinstalling
          - key: cloud.sap/esx-in-maintenance
            operator: NotIn
            values:
            - alarm
  env:
    - name: NAMESPACE
      valueFrom:
        fieldRef:
          fieldPath: metadata.namespace
    - name: KUBE_NODE_NAME
      valueFrom:
        fieldRef:
          fieldPath: spec.nodeName
    - name: MY_POD_IP
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: status.podIP
    - name: cluster
      value: "{{ .Values.openTelemetryPlugin.auditLogs.cluster }}"
    - name: region
      value: "{{ .Values.openTelemetryPlugin.auditLogs.region }}"
    - name: index
      value: "{{ .Values.openTelemetryPlugin.auditLogs.openSearchLogs.index }}"
  envFrom:
    - secretRef:
          name: audit-logs-basic-auth
{{- if .Values.openTelemetryPlugin.auditLogs.prometheus.podMonitor.enabled }}
  ports:
    - name: prometheus
      port: 8888
{{- end }}

{{- if .Values.openTelemetryPlugin.auditLogs.logsCollector.auditdConfig.enabled }}
  initContainers:
{{- include "auditd.initContainer" . | nindent 2 -}}
{{- end }}

  image: {{ index .Values "openTelemetryPlugin" "opentelemetry-operator" "manager" "collectorImage" "repository" }}:{{ index .Values "openTelemetryPlugin" "opentelemetry-operator" "manager" "collectorImage" "tag" }}
  volumeMounts:
  - mountPath: /var/log
    name: varlog
    readOnly: true
  - name: bin
    mountPath: /hostfs/bin
    readOnly: true
  - name: sbin
    mountPath: /hostfs/sbin
    readOnly: true
  - name: usrbin
    mountPath: /hostfs/usr/bin
    readOnly: true
  - name: usrsbin
    mountPath: /hostfs/usr/sbin
    readOnly: true
  - name: etc
    mountPath: /hostfs/etc
    readOnly: true
  # Directory with root filesystems of containers executed with containerd, this can be
  # different with other runtimes. This volume is needed to monitor the file integrity
  # of files in containers.
  - name: run-containerd
    mountPath: /run/containerd
    readOnly: true

  volumes:
  - name: varlog
    hostPath:
      path: /var/log
  - name: bin
    hostPath:
      path: /bin
  - name: usrbin
    hostPath:
      path: /usr/bin
  - name: sbin
    hostPath:
      path: /sbin
  - name: usrsbin
    hostPath:
      path: /usr/sbin
  - name: etc
    hostPath:
      path: /etc
  - name: run-containerd
    hostPath:
      path: /run/containerd
      type: DirectoryOrCreate

{{- if .Values.openTelemetryPlugin.auditLogs.logsCollector.auditdConfig.enabled }}
{{- include "auditd.initContainerVolumes" . | nindent 2 -}}
{{- end }}

  config:
    receivers:
      k8s_events:
        auth_type: serviceAccount

{{- if .Values.openTelemetryPlugin.auditLogs.logsCollector.auditdConfig.enabled }}
  {{- include "auditd.receiver" . | nindent 6 -}}
{{- end }}

{{- if .Values.openTelemetryPlugin.auditLogs.logsCollector.filewatchConfig.enabled }}
  {{- include "filewatch.receiver" . | nindent 6 -}}
{{- end }}

    processors:
      batch:
        send_batch_max_size: 5000
        timeout: 5s
        send_batch_size : 100

{{- if .Values.openTelemetryPlugin.auditLogs.logsCollector.auditdConfig.enabled }}
  {{- include "auditd.processors" . | nindent 6 -}}
{{- end }}

{{- if .Values.openTelemetryPlugin.auditLogs.logsCollector.filewatchConfig.enabled }}
  {{- include "filewatch.processors" . | nindent 6 -}}
{{- end }}

{{- if .Values.openTelemetryPlugin.auditLogs.prometheus.podMonitor.enabled }}
      attributes/prometheus:
        actions:
          - action: insert
            key: k8s_node_name
            value: ${KUBE_NODE_NAME}
          - action: insert
            key: k8s_cluster_name
            value: ${cluster}
          - action: insert
            key: region
            value: ${region}
          - action: delete
            key: service_instance_id
          - action: delete
            key: pod
{{- end }}

      attributes/cluster:
        actions:
          - action: insert
            key: k8s.cluster.name
            value: ${cluster}
          - action: insert
            key: region
            value: ${region}
          - action: insert
            key: k8s.node.name
            value: ${KUBE_NODE_NAME}

      attributes/k8sevents:
        actions:
          - action: insert
            key: k8s.node.name
            value: ${KUBE_NODE_NAME}
          - key: k8s.namespace.name
            from_attribute: k8s.namespace.name
            action: insert
          - action: insert
            key: k8s.cluster.name
            value: ${cluster}
          - action: insert
            key: region
            value: ${region}
          - action: insert
            key: log.type
            value: "k8sevents"

      attributes/failover_username_a:
        actions:
          - action: insert
            key: failover_username_opensearch
            value: ${failover_username_a}

{{- if .Values.openTelemetryPlugin.auditLogs.openSearchLogs.failover.enabled }}
  {{- include "failover.attributes" . | nindent 6 -}}
{{- end }}

      transform/journal:
        error_mode: ignore
        log_statements:
          - context: log
            statements:
              - merge_maps(log.cache, body, "upsert") where IsMatch(log.body, "^\\{")
              - set(log.attributes["message"], log.cache["MESSAGE"])
              - set(log.attributes["code_file"], log.cache["CODE_FILE"])
              - set(log.attributes["code_func"], log.cache["CODE_FUNC"])
              - set(log.attributes["code_line"], log.cache["CODE_LINE"])
              - set(log.attributes["incovation_id"], log.cache["INVOCATION_ID"])
              - set(log.attributes["message_id"], log.cache["MESSAGE_ID"])
              - set(log.attributes["priority"], log.cache["PRIORITY"])
              - set(log.attributes["syslog_facility"], log.cache["SYSLOG_FACILITY"])
              - set(log.attributes["syslog_identifier"], log.cache["SYSLOG_IDENTIFIER"])
              - set(log.attributes["tid"], log.cache["TID"])
              - set(log.attributes["unit"], log.cache["UNIT"])
              - set(log.attributes["boot_id"], log.cache["_BOOT_ID"])
              - set(log.attributes["cao_effective"], log.cache["_CAP_EFFECTIVE"])
              - set(log.attributes["cmdline"], log.cache["_CMDLINE"])
              - set(log.attributes["exe"], log.cache["_EXE"])
              - set(log.attributes["gid"], log.cache["_GID"])
              - set(log.attributes["hostname"], log.cache["_HOSTNAME"])
              - set(log.attributes["machine_id"], log.cache["_MACHINE_ID"])
              - set(log.attributes["pid"], log.cache["_PID"])
              - set(log.attributes["runtime_scope"], log.cache["_RUNTIME_SCOPE"])
              - set(log.attributes["selinux_context"], log.cache["_SELINUX_CONTEXT"])
              - set(log.attributes["source_realtime_timestamp"], log.cache["_SOURCE_REALTIME_TIMESTAMP"])
              - set(log.attributes["systemd_cgroup"], log.cache["_SYSTEMD_CGROUP"])
              - set(log.attributes["systemd_slice"], log.cache["_SYSTEMD_SLICE"])
              - set(log.attributes["systemd_unit"], log.cache["_SYSTEMD_UNIT"])
              - set(log.attributes["transport"], log.cache["_TRANSPORT"])
              - set(log.attributes["uid"], log.cache["_UID"])
              - set(log.attributes["cursor"], log.cache["__CURSOR"])
              - set(log.attributes["monotonic_timestamp"], log.cache["__MONOTONIC_TIMESTAMP"])
              - delete_key(attributes, "log.cache")

    exporters:
      debug:
        verbosity: basic
      opensearch/failover_a:
        http:
          auth:
            authenticator: basicauth/failover_a
          endpoint: {{ .Values.openTelemetryPlugin.auditLogs.openSearchLogs.endpoint }}
        logs_index: ${index}-datastream

      opensearch/failover_b:
        http:
          auth:
            authenticator: basicauth/failover_b
          endpoint: {{ .Values.openTelemetryPlugin.auditLogs.openSearchLogs.endpoint }}
        logs_index: ${index}-datastream

{{- if .Values.openTelemetryPlugin.auditLogs.openSearchLogs.failover.enabled }}
  {{- include "failover.exporter" . | nindent 6 -}}
{{- end }}

    extensions:
      basicauth/failover_a:
        client_auth:
          username: ${failover_username_a}
          password: ${failover_password_a}

{{- if .Values.openTelemetryPlugin.auditLogs.openSearchLogs.failover.enabled }}
  {{- include "failover.extension" . | nindent 6 -}}
{{- end }}


    connectors:
      forward: {}
      failover:
        priority_levels:
          - [logs/failover_a]
{{- if .Values.openTelemetryPlugin.auditLogs.openSearchLogs.failover.enabled }}
          - [logs/failover_b]
{{- end }}
        retry_interval: 20m
        retry_gap: 5m
        max_retries: 0
    service:
      extensions:
        - basicauth/failover_a
{{- if .Values.openTelemetryPlugin.auditLogs.openSearchLogs.failover.enabled }}
        - basicauth/failover_b
{{- end }}

{{- if .Values.openTelemetryPlugin.auditLogs.prometheus.podMonitor.enabled }}
      telemetry:
        metrics:
          level: detailed
          readers:
          - pull:
              exporter:
                prometheus:
                  host: 0.0.0.0
                  port: 9999
                  with_resource_constant_labels:
                    included:
                    - k8s_node_name
                    - k8s_cluster_name
                    - region
        resource:
          k8s_cluster_name: ${cluster}
          k8s_node_name: ${KUBE_NODE_NAME}
          region: ${region}
{{- end }}
      pipelines:
        logs/container:
          receivers: [filelog/container]
          processors: [batch]
          exporters: [opensearch/failover_a]
        logs/failover_b:
          receivers: [failover]
          processors: [attributes/failover_username_b]
          exporters: [opensearch/failover_b]

{{- if .Values.openTelemetryPlugin.auditLogs.logsCollector.auditdConfig.enabled }}
{{- include "auditd.pipelines" . | nindent 8 -}}
{{- end }}

{{- if .Values.openTelemetryPlugin.auditLogs.logsCollector.filewatchConfig.enabled }}
{{- include "filewatch.pipelines" . | nindent 8 -}}
{{- end }}

{{- if .Values.openTelemetryPlugin.auditLogs.openSearchLogs.failover.enabled }}
{{- include "failover.pipeline" . | nindent 8 -}}
{{- end }}
