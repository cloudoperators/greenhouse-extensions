{{/*
SPDX-FileCopyrightText: 2024 SAP SE or an SAP affiliate company and Greenhouse contributors
SPDX-License-Identifier: Apache-2.0
*/}}

apiVersion: opentelemetry.io/v1beta1
kind: OpenTelemetryCollector
metadata:
  name: audit-logs
  labels:
  {{- include "plugin.labels" . | nindent 4 }} 
  {{- if .Values.auditLogs.customLabels }}
  {{ toYaml .Values.auditLogs.customLabels | nindent 4 }}
  {{- end }}
spec:
  mode: daemonset
  tolerations:
  - operator: Exists
  env:
    - name: NAMESPACE
      valueFrom:
        fieldRef:
          fieldPath: metadata.namespace
    - name: KUBE_NODE_NAME
      valueFrom:
        fieldRef:
          fieldPath: spec.nodeName
    - name: MY_POD_IP
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: status.podIP
    - name: index
      value: "{{ .Values.auditLogs.openSearchLogs.index }}"
  envFrom:
    - secretRef:
         name: audit-logs-basic-auth
{{- if .Values.auditLogs.prometheus.podMonitor.enabled }}
  ports:
    - name: prometheus
      port: 8888
{{- end }}
  image: {{ .Values.auditLogs.collectorImage.repository }}:{{ .Values.auditLogs.collectorImage.tag }}
  volumeMounts:
  - mountPath: /var/log
    name: varlog
    readOnly: true
  volumes:
  - name: varlog
    hostPath:
      path: /var/log
  config:
    receivers:
      journald:
        directory: /var/log/journal
        operators:
          - id: journal-label
            type: add
            field: attributes["log.type"]
            value: "journald"

      filelog/container:
        include_file_path: true
        include: [ /var/log/containers/*.log ]
        operators:
          - id: container-label
            type: add
            field: attributes["log.type"]
            value: "container"
          - id: container-parser
            type: container

    processors:
      batch:
        send_batch_max_size: 500
        timeout: 5s
        send_batch_size : 10

      transform/journal:
        error_mode: ignore
        log_statements:
          - context: log
            statements:
              - merge_maps(log.cache, body, "upsert") where IsMatch(log.body, "^\\{")
              - set(log.attributes["message"], log.cache["MESSAGE"])
              - set(log.attributes["code_file"], log.cache["CODE_FILE"])
              - set(log.attributes["code_func"], log.cache["CODE_FUNC"])
              - set(log.attributes["code_line"], log.cache["CODE_LINE"])
              - set(log.attributes["incovation_id"], log.cache["INVOCATION_ID"])
              - set(log.attributes["message_id"], log.cache["MESSAGE_ID"])
              - set(log.attributes["priority"], log.cache["PRIORITY"])
              - set(log.attributes["syslog_facility"], log.cache["SYSLOG_FACILITY"])
              - set(log.attributes["syslog_identifier"], log.cache["SYSLOG_IDENTIFIER"])
              - set(log.attributes["tid"], log.cache["TID"])
              - set(log.attributes["unit"], log.cache["UNIT"])
              - set(log.attributes["boot_id"], log.cache["_BOOT_ID"])
              - set(log.attributes["cao_effective"], log.cache["_CAP_EFFECTIVE"])
              - set(log.attributes["cmdline"], log.cache["_CMDLINE"])
              - set(log.attributes["exe"], log.cache["_EXE"])
              - set(log.attributes["gid"], log.cache["_GID"])
              - set(log.attributes["hostname"], log.cache["_HOSTNAME"])
              - set(log.attributes["machine_id"], log.cache["_MACHINE_ID"])
              - set(log.attributes["pid"], log.cache["_PID"])
              - set(log.attributes["runtime_scope"], log.cache["_RUNTIME_SCOPE"])
              - set(log.attributes["selinux_context"], log.cache["_SELINUX_CONTEXT"])
              - set(log.attributes["source_realtime_timestamp"], log.cache["_SOURCE_REALTIME_TIMESTAMP"])
              - set(log.attributes["systemd_cgroup"], log.cache["_SYSTEMD_CGROUP"])
              - set(log.attributes["systemd_slice"], log.cache["_SYSTEMD_SLICE"])
              - set(log.attributes["systemd_unit"], log.cache["_SYSTEMD_UNIT"])
              - set(log.attributes["transport"], log.cache["_TRANSPORT"])
              - set(log.attributes["uid"], log.cache["_UID"])
              - set(log.attributes["cursor"], log.cache["__CURSOR"])
              - set(log.attributes["monotonic_timestamp"], log.cache["__MONOTONIC_TIMESTAMP"])
              - delete_key(attributes, "log.cache")

    exporters:
      debug:
        verbosity: basic
      opensearch/failover_a:
        http:
          auth:
            authenticator: basicauth/failover_a
          endpoint: {{ .Values.auditLogs.openSearchLogs.endpoint }}
        logs_index: ${index}-datastream
    
    extensions:
      basicauth/failover_a:
        client_auth:
          username: ${failover_username_a}
          password: ${failover_password_a}

    service: 
      extensions:
        - basicauth/failover_a
{{- if .Values.auditLogs.prometheus.podMonitor.enabled }}
      telemetry:
        metrics:
          level: detailed
          readers:
          - pull:
              exporter:
                prometheus:
                  host: 0.0.0.0
                  port: 8888
                  with_resource_constant_labels:
                    included:
                    - k8s_node_name
                    - k8s_cluster_name
                    - region
        resource:
          k8s_cluster_name: ${cluster}
          k8s_node_name: ${KUBE_NODE_NAME}
          region: ${region}
{{- end }}
      pipelines:
        logs/container:
          receivers: [filelog/container]
          processors: [batch]
          exporters: [opensearch/failover_a]
        logs/journal:
          receivers: [journald]
          processors: [batch, transform/journal]
          exporters: [opensearch/failover_a]
