name: "E2E Flux"
on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  HELM_VERSION: v3.17.0
  PYTHON_VERSION: "3.13"
  CT_CONFIG: .github/configs/helm-chart-testing.yaml

jobs:
  e2e-flux:
    runs-on: [default]
    steps:
      - name: Set up Helm
        uses: azure/setup-helm@1a275c3b69536ee54be43f2070a358922e12c8d4 # v4.3.1
        with:
          version: ${{ env.HELM_VERSION }}

      - name: Set up Flux CLI
        uses: fluxcd/flux2/action@4a15fa6a023259353ef750acf1c98fe88407d4d0 # v2.7.2

      - name: Set up chart-testing
        uses: helm/chart-testing-action@0d28d3144d3a25ea2cc349d6e59901c4ff469b3b # v2.7.0

      - name: Run Git Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Run chart-testing (list-changed)
        id: list-changed
        run: |
          changed_charts=$(ct list-changed --config ${{ env.CT_CONFIG }} --target-branch ${{ github.event.repository.default_branch }})
          if [[ -n "$changed_charts" ]]; then
            echo "changed=true" >> "$GITHUB_OUTPUT"
            echo "$changed_charts" > changed_charts.txt
          fi

      - name: Verify only one chart changed
        if: steps.list-changed.outputs.changed == 'true'
        id: chart
        run: |
          set -euo pipefail
          count=$(wc -l < changed_charts.txt | tr -d ' ')
          if [[ "$count" -ne 1 ]]; then
            echo "Expected exactly 1 changed chart, found $count:"
            cat changed_charts.txt
            exit 1
          fi
          chart_dir="$(head -n1 changed_charts.txt | tr -d '\r')"
          chart_yaml="$chart_dir/Chart.yaml"
          if [[ ! -f "$chart_yaml" ]]; then
            echo "No Chart.yaml at $chart_yaml"
            exit 1
          fi
          plugin_name="$(yq e '.name' "$chart_yaml")"
          # Set outputs
          {
            echo "chart_dir=$chart_dir"
            echo "chart_yaml=$chart_yaml"
            echo "plugin_dir=$(dirname "$chart_dir")"
            echo "plugin_name=$plugin_name"
          } >> "$GITHUB_OUTPUT"
          echo "Single changed chart: $chart_dir (name=$plugin_name)"

      - name: Create kind cluster
        if: steps.list-changed.outputs.changed == 'true'
        uses: helm/kind-action@a1b0e391336a6ee6713a0583f8c6240d70863de3 # v1.12.0

      - name: Install plugin dependencies (if any)
        if: steps.list-changed.outputs.changed == 'true'
        run: |
          set -euo pipefail
          plugin_dir=${{ steps.chart.outputs.plugin_dir }}
          dep_file="${plugin_dir}/test-dependencies.yaml"
          if [[ ! -f "$dep_file" ]]; then
            echo "ℹ️ No test-dependencies.yaml for $plugin_dir"
            exit 0
          fi
          echo "🔍 Found test-dependencies.yaml for $plugin_dir"
          deps=$(yq eval '.dependencies[]' "$dep_file" 2>/dev/null || true)
          if [[ -z "$deps" ]]; then
            echo "⚠️ No dependencies listed."
            exit 0
          fi
          values_present=$(yq eval '.values' "$dep_file" 2>/dev/null || true)
          for dep in $deps; do
            echo "📦 Installing dependent plugin: $dep"
            if [[ ! -d "$dep/charts" ]]; then
              echo "❌ Expected directory ./$dep/charts" >&2
              exit 1
            fi
            if [[ -n "$values_present" && "$values_present" != "null" ]]; then
              helm upgrade --install "$dep" "./$dep/charts" --values <(yq eval '.values' "$dep_file") --wait
            else
              helm upgrade --install "$dep" "./$dep/charts" --wait
            fi
          done

      - name: Install Flux
        if: steps.list-changed.outputs.changed == 'true'
        run: flux install

      - name: Register Flux GitRepository
        if: steps.list-changed.outputs.changed == 'true'
        shell: bash
        run: |
          set -euo pipefail
          # Determine branch (PR vs push)
          branch="${{ github.head_ref || github.ref_name }}"
          cat <<EOF | kubectl apply -f -
          apiVersion: source.toolkit.fluxcd.io/v1
          kind: GitRepository
          metadata:
            name: workspace
            namespace: flux-system
          spec:
            interval: 1m
            url: https://github.com/${{ github.repository }}
            ref:
              branch: ${branch}
          EOF
          kubectl -n flux-system get gitrepository workspace -o yaml

      - name: Create HelmRelease
        if: steps.list-changed.outputs.changed == 'true'
        shell: bash
        run: |
          set -euo pipefail
          chart_yaml=${{ steps.chart.outputs.chart_yaml }}
          chart_dir=${{ steps.chart.outputs.chart_dir }}
          name=${{ steps.chart.outputs.plugin_name }}
          version="$(yq e '.version' "$chart_yaml")"
          cat <<EOF | kubectl apply -f -
          apiVersion: helm.toolkit.fluxcd.io/v2
          kind: HelmRelease
          metadata:
            name: ${name}
            namespace: flux-system
          spec:
            interval: 5m
            releaseName: ${name}
            targetNamespace: default
            chart:
              spec:
                chart: ./${chart_dir}
                reconcileStrategy: Revision
                version: "${version}"
                sourceRef:
                  kind: GitRepository
                  name: workspace
                  namespace: flux-system
            install:
              remediation:
                retries: 1
          EOF
          kubectl -n flux-system get helmrelease ${name} -o yaml

      - name: Wait for GitRepository & HelmRelease Ready
        if: steps.list-changed.outputs.changed == 'true'
        run: |
          set -euo pipefail
          hr_name=${{ steps.chart.outputs.plugin_name }}

          echo "Waiting for GitRepository workspace..."
          if ! kubectl -n flux-system wait gitrepository/workspace --for=condition=Ready --timeout=1m; then
            echo "GitRepository not Ready:"
            kubectl -n flux-system get gitrepository workspace -o yaml || true
            kubectl -n flux-system logs deploy/source-controller | tail -n 200 || true
            exit 1
          fi

          echo "Waiting for HelmRelease $hr_name..."
            if ! kubectl -n flux-system wait helmrelease/"$hr_name" --for=condition=Ready --timeout=1m; then
            echo "HelmRelease not Ready diagnostics:"
            kubectl -n flux-system get helmrelease "$hr_name" -o yaml || true
            kubectl -n flux-system logs deploy/helm-controller | tail -n 200 || true
            exit 1
          fi
          echo "HelmRelease $hr_name Ready."

      - name: Run Helm tests
        if: steps.list-changed.outputs.changed == 'true'
        run: |
          set -euo pipefail
          release="${{ steps.chart.outputs.plugin_name }}"
          echo "Running helm tests for release: $release (namespace: flux-system)"
          helm status "$release" -n flux-system
          # Run tests (if no test hooks defined this will be a no-op)
          helm test "$release" -n flux-system --timeout 5m --logs || {
            echo "Helm tests failed, collecting diagnostics..."
            kubectl get pods -n flux-system -o wide || true
            kubectl logs -l app.kubernetes.io/instance="$release" -n flux-system --tail=200 || true
            exit 1
          }

      - name: Print pod logs on failure
        if: failure() && steps.list-changed.outputs.changed == 'true'
        run: |
          kubectl get pods -n default || true
          helm list -n flux-system
          kubectl -n flux-system get gitrepository workspace -o yaml || true
          kubectl -n flux-system get helmrelease ${{ steps.chart.outputs.plugin_name }} -o yaml || true
          kubectl -n flux-system logs deploy/source-controller | tail -n 200 || true
          kubectl -n flux-system logs deploy/helm-controller | tail -n 200 || true
          kubectl get deployments -n default
          kubectl get services -n default
          echo
          for pod in $(kubectl get pods -n default --field-selector=status.phase!=Succeeded,status.phase!=Running -o jsonpath='{.items[*].metadata.name}'); do
            echo "Logs for pod $pod:"
            kubectl logs -n default $pod --all-containers=true || true
          done
