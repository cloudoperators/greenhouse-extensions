name: "Helm Docs Check"

on:
  pull_request:
    paths:
      - "**/*/values.yaml"
      - "**/*/*/values.yaml"

jobs:
  helm-docs-check:
    runs-on: [default]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up go environment
        uses: actions/setup-go@v5
        with:
          go-version: 1.22.0

      - name: Detect Changed Plugins
        id: changed-plugins
        run: |
          echo "Detecting changed values.yaml files..."
          changed_values=$(git diff --name-only origin/${{ github.event.repository.default_branch }} HEAD | grep "/values.yaml" || true)

          if [[ -z "$changed_values" ]]; then
            echo "No values.yaml changes detected."
            echo "changed_plugins=" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          # Extract plugin names from the changed values.yaml paths 
          changed_plugins=$(echo "$changed_values" | cut -d'/' -f1 | sort -u | tr '\n' ' ')
          echo "Plugins with changed values.yaml: $changed_plugins"
          echo "changed_plugins=$changed_plugins" >> "$GITHUB_OUTPUT"

      - name: Generate README.md using Helm Docs
        id: generate-readme
        run: |
          changed_plugins="${{ steps.changed-plugins.outputs.changed_plugins }}"
          if [[ -z "$changed_plugins" ]]; then
            echo "No plugins need README generation."
            exit 0
          fi

          echo "Generating README.md for modified plugins with template..."
          for plugin in $changed_plugins; do
            if [[ -f "$plugin/README.md.gotmpl" ]]; then
              echo "Processing $plugin..."
              make generate-readme PLUGIN=$plugin
            else
              echo "Skipping $plugin - README.md.gotmpl not found."
            fi
          done
          echo "README.md generation completed."

      - name: Check for README.md Changes
        id: check-readme
        run: |
          changed_plugins="${{ steps.changed-plugins.outputs.changed_plugins }}"
          if [[ -z "$changed_plugins" ]]; then
            echo "No plugins to check for README changes."
            echo "needs_update=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          echo "Checking if README.md files were modified..."
          echo "The changed plugins are: $changed_plugins"

          needs_update=false
          for plugin in $changed_plugins; do
            if [[ -f "$plugin/README.md.gotmpl" ]]; then
              if ! git diff --quiet origin/${{ github.event.repository.default_branch }} -- "$plugin/README.md"; then
                echo "README.md for $plugin is outdated."
                needs_update=true
              fi
            fi
          done

          echo "needs_update=$needs_update" >> "$GITHUB_OUTPUT"

      - name: Fail if README.md is outdated
        if: steps.check-readme.outputs.needs_update == 'true'
        run: |
          changed_plugins="${{ steps.changed-plugins.outputs.changed_plugins }}"
          echo "README.md is outdated. Please run the following command for each affected plugin and update the PR:"
          for plugin in $changed_plugins; do
            if [[ -f "$plugin/README.md.gotmpl" ]]; then
              echo "make generate-readme PLUGIN=$plugin"
            fi
          done
          exit 1

      - name: Post PR comment if README is outdated
        if: failure() && steps.check-readme.outputs.needs_update == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            const changedPlugins = "${{ steps.changed-plugins.outputs.changed_plugins }}".split(" ");
            const pluginCommands = changedPlugins
              .filter(plugin => `[[ -f "${plugin}/README.md.gotmpl" ]]`)
              .map(plugin => `make generate-readme PLUGIN=${plugin}`)
              .join("\n");
            const comment = `⚠️ The README.md for one or more plugins is outdated. Please run the following commands and update this PR:
            \n\n${pluginCommands}
            \n\nEnsure the README is up to date before merging.`;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });
