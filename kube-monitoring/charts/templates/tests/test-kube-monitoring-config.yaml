apiVersion: v1
kind: ConfigMap
metadata:
  name: test-kube-monitoring-config
  labels:
    type: integration-test
  annotations:
    "helm.sh/hook": test
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded" # this annotation is used to delete the test pod after the test is successful
data:
  run.sh: |-

    #!/usr/bin/env bats
    
    load "../lib/utils"
    load "../lib/detik"
    
    DETIK_CLIENT_NAME="kubectl"
    
    @test "check if the kube-monitoring-operator components are setup correctly and the pod is running" {
        verify "there is 1 deployment named 'kube-monitoring-operator'"
        verify "there is 1 service named 'kube-monitoring-operator'"
        try "at most 2 times every 5s to get pods named 'kube-monitoring-operator' and verify that '.status.phase' is 'running'"
    }

    @test "check if the kube-monitoring-prometheus service is setup correctly and the pod is running" {
        verify "there is 1 service named 'kube-monitoring-prometheus'"
        try "at most 2 times every 5s to get pods named 'prometheus-kube-monitoring' and verify that 'status' is 'running'"
    }

    @test "check if the kube-monitoring-node-exporter components are setup correctly and the pod is running" {
        verify "there is 1 service named 'kube-monitoring-node-exporter'"
        try "at most 2 times every 5s to get pods named 'kube-monitoring-node-exporter.*' and verify that '.status.phase' is 'running'"
    }

    @test "check if the kube-monitoring-kube-state-metrics components are setup correctly and the pod is running" {
        verify "there is 1 service named 'kube-monitoring-kube-state-metrics'"
        try "at most 2 times every 5s to get pods named 'kube-monitoring-kube-state-metrics.*' and verify that '.status.phase' is 'running'"
    }

    @test "check if the persistent volume is created and status is bound" {
        try "at most 3 times every 5s to get persistentvolumeclaims named 'kube-monitoring.*' and verify that '.status.phase' is 'Bound'"
    }

    @test "check if the kube-monitoring resource of type 'Prometheus' is created and setup correctly" {
        try "at most 3 times every 5s to get prometheuses named 'kube-monitoring' and verify that '.status.availableReplicas' is more than '0'"
    }

    @test "check if the required crds are created for kube-monitoring" {
        verify "there is 1 customresourcedefinition named 'prometheuses'"
        verify "there is 1 customresourcedefinition named 'podmonitors'"
        verify "there is 1 customresourcedefinition named 'prometheusrules'"
        verify "there is 1 customresourcedefinition named 'servicemonitors'"
        verify "there is 1 customresourcedefinition named 'thanosrulers'"
        verify "there is 1 customresourcedefinition named 'scrapeconfigs'"
        verify "there is 1 customresourcedefinition named 'alertmanagers'"
        verify "there is 1 customresourcedefinition named 'alertmanagerconfigs'"
    }

    