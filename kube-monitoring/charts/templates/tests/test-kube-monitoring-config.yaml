{{- if .Values.testFramework.enabled -}}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-test
  namespace: {{ .Release.Namespace }}
  labels:
    type: integration-test  
    {{- include "kube-prometheus-stack.labels" . | nindent 4 }} 
data:
  run.sh: |-

    #!/usr/bin/env bats
    
    load "/usr/lib/bats/bats-detik/utils"
    load "/usr/lib/bats/bats-detik/detik"
    
    DETIK_CLIENT_NAME="kubectl"

    {{- if .Values.kubeMonitoring.prometheusOperator.enabled }}
    @test "Verify successful deployment and running status of the {{ .Release.Name }}-operator pod" {
        verify "there is 1 deployment named '{{ .Release.Name }}-operator'"
        verify "there is 1 service named '{{ .Release.Name }}-operator'"
        verify "'.status.phase' is 'running' for pods named '{{ .Release.Name }}-operator'"
    }
    {{- end }}
    
    {{- if .Values.kubeMonitoring.prometheus.enabled }}
    @test "Verify successful deployment and running status of the {{ .Release.Name }}-prometheus service and pod" {
        verify "there is 1 service named '{{ .Release.Name }}-prometheus'"
        verify "'.status.phase' is 'running' for pods named 'prometheus-{{ .Release.Name }}'"
    }

        @test "Verify successful creation and bound status of {{ .Release.Name }} persistent volume claims" {
        verify "'.status.phase' is 'Bound' for persistentvolumeclaims named '{{ .Release.Name }}.*'"
    }

        @test "Verify successful creation and available replicas of {{ .Release.Name }} Prometheus resource" {
        verify "'.status.availableReplicas' is '1' for prometheuses named '{{ .Release.Name }}'"
    }

    @test "Verify creation of the prometheus-{{ .Release.Name }} statefulset" {
        verify "there is 1 statefulset named 'prometheus-{{ .Release.Name }}'"
    }
    {{- end }}

    {{- if .Values.kubeMonitoring.nodeExporter.enabled }}
    @test "Verify successful deployment and running status of the {{ .Release.Name }}-node-exporter pod" {
        verify "there is 1 service named '{{ .Release.Name }}-node-exporter'"
        verify "'.status.phase' is 'running' for pods named '{{ .Release.Name }}-node-exporter.*'"
    }
    {{- end }}

    {{- if .Values.kubeMonitoring.kubeStateMetrics.enabled }}
    @test "Verify successful deployment and running status of the {{ .Release.Name }}-kube-state-metrics pod" {
        verify "there is 1 service named '{{ .Release.Name }}-kube-state-metrics'"
        verify "'.status.phase' is 'running' for pods named '{{ .Release.Name }}-kube-state-metrics.*'"
    }
    {{- end }}
    
    {{- if and .Values.kubeMonitoring.prometheus.enabled .Values.kubeMonitoring.serviceDiscovery.pods.enabled }}
    @test "Verify creation of the {{ .Release.Name }}-pod-sd Podmonitor" {
        verify "there is 1 podmonitor named '{{ .Release.Name }}-pod-sd'"
    }
    {{- end }}

    {{- if .Values.kubeMonitoring.crds.enabled }}
    @test "Verify creation of required custom resource definitions (CRDs) for {{ .Release.Name }}" {
        verify "there is 1 customresourcedefinition named 'prometheuses'"
        verify "there is 1 customresourcedefinition named 'podmonitors'"
        verify "there is 1 customresourcedefinition named 'prometheusrules'"
        verify "there is 1 customresourcedefinition named 'servicemonitors'"
        verify "there is 1 customresourcedefinition named 'thanosrulers'"
        verify "there is 1 customresourcedefinition named 'scrapeconfigs'"
        verify "there is 1 customresourcedefinition named 'alertmanagers'"
        verify "there is 1 customresourcedefinition named 'alertmanagerconfigs'"
    }
    {{- end }}
{{- end -}}
