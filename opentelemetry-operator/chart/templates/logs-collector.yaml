{{/* 
SPDX-FileCopyrightText: 2024 SAP SE or an SAP affiliate company and Greenhouse contributors
SPDX-License-Identifier: Apache-2.0
*/}}

apiVersion: opentelemetry.io/v1alpha1
kind: OpenTelemetryCollector
metadata:
  name: logs 
spec:
  mode: daemonset
  tolerations:
  - operator: Exists
  env:
    - name: NAMESPACE
      valueFrom:
        fieldRef:
          fieldPath: metadata.namespace
    - name: KUBE_NODE_NAME
      valueFrom:
        fieldRef:
          fieldPath: spec.nodeName
    - name: MY_POD_IP
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: status.podIP
    - name: username
      valueFrom:
        secretKeyRef:
          name: otel-basic-auth
          key: username
    - name: password
      valueFrom:
        secretKeyRef:
          name: otel-basic-auth
          key: password          
    - name: cluster
      value: "{{ .Values.open_telemetry.cluster }}"
    - name: region
      value: "{{ .Values.open_telemetry.region }}"
{{- if index .Values "open_telemetry" "podMonitor" "enabled" }}
  ports:
    - name: prometheus
      port: 9999
{{- end }}
  image: {{ index .Values "opentelemetry-operator" "manager" "collectorImage" "repository" }}:{{ index .Values "opentelemetry-operator" "manager" "collectorImage" "tag" }}
  volumeMounts:
  - mountPath: /var/log
    name: varlog
    readOnly: true
  volumes:
  - name: varlog
    hostPath:
      path: /var/log
  config: |
    receivers:
      filelog:
        include: [ /var/log/pods/*/*/*.log ]
        exclude: [ var/log/pods/*/logs-collector/*.log ]
        include_file_path: true
        include_file_name: false
        start_at: end
        retry_on_failure:
          enabled: true

        operators:
          - id: get-format
            type: router
            routes:
              - output: set-containerd
                expr: 'body matches "^[^ Z]+Z"'

          - id: set-containerd
            type: add
            field: resource["container.runtime"]
            value: "containerd"

           # Parse CRI-Containerd format
          - id: parser-containerd
            type: regex_parser
            regex: '^(?P<time>[^ Z]+Z) (?P<stream>stdout|stderr) (?P<logtag>[^ ]*)'
            timestamp:
              parse_from: attributes.time
              layout: '%Y-%m-%dT%H:%M:%S.%LZ'

          - id: parse-time
            type: regex_parser
            regex: '^(?P<time>[^ Z]+)'
            timestamp:
              parse_from: attributes.time
              layout_type: gotime
              layout: '2006-01-02T15:04:05.999999999'

          # Extract metadata from file path
          - id: extract_metadata_from_filepath
            type: regex_parser
            regex: '^.*\/(?P<namespace>[^_]+)_(?P<pod_name>[^_]+)_(?P<uid>[a-f0-9\-]{36})\/(?P<container_name>[^\._]+)\/(?P<restart_count>\d+)\.log$'
            parse_from: attributes["log.file.path"]
            cache:
              size: 128

          # Rename attributes
          - type: move
            from: attributes.stream
            to: attributes["log.iostream"]
          - type: move
            from: attributes.container_name
            to: resource["k8s.container.name"]
          - type: move
            from: attributes.namespace
            to: resource["k8s.namespace"]
          - type: move
            from: attributes.pod_name
            to: resource["k8s.pod.name"]
          - type: move
            from: attributes.restart_count
            to: resource["k8s.container.restart_count"]
          - type: move
            from: attributes.uid
            to: resource["k8s.pod.uid"]

{{- if index .Values "open_telemetry" "podMonitor" "enabled" }}
      prometheus/internal:
        config:
          scrape_configs:
            - job_name: 'internal'
              scrape_interval: 5s
              static_configs:
                - targets: ['127.0.0.1:8888']
{{- end }}

    processors:
      batch:
        send_batch_max_size: 10000
        timeout: 10s
        send_batch_size : 400

{{- if index .Values "open_telemetry" "podMonitor" "enabled" }}
      attributes/prometheus:
        actions:
          - action: insert
            key: nodename
            value: ${KUBE_NODE_NAME}
          - action: insert
            key: cluster
            value: ${cluster}
          - action: insert
            key: region
            value: ${region}
          - action: delete
            key: service_instance_id
          - action: delete
            key: pod
{{- end }}

      attributes/cluster:
        actions:
          - action: insert
            key: cluster
            value: ${cluster}
          - action: insert
            key: region
            value: ${region}
          - action: insert
            key: nodename
            value: ${KUBE_NODE_NAME}

      resource/k8sevents:
        attributes:
          - key: k8s.node.name
            value: ${KUBE_NODE_NAME}
            action: insert
          - key: cluster
            value: ${cluster}
            action: insert
          - key: region
            value: ${region}
            action: insert

      transform/containerd:
        log_statements:
          context: log
          statements:
            - merge_maps(cache,ExtractPatterns(body,"^(?P<time>[^Z]+Z) (?P<stream>stdout|stderr) (?P<logtag>[^\\s]*) ?(?P<log>.*)$"), "upsert") where body != nil
            - merge_maps(cache,ExtractPatterns(body,"^(?P<time>\\d+/\\d+/\\d+\\s+\\d+:\\d+\\d+) (?P<log>.*)$"), "upsert") where attributes["log_name"]!= "MeshAccessLog" and cache["log"]!= nil and not IsMap(cache["log"])
            - set(body,cache["log"]) where cache["log"] != nil
            - merge_maps(cache,ParseJSON(body), "upsert") where IsMap(body)
            - set(body,cache["message"]) where cache["message"] != nil
            - set(body,cache["msg"]) where cache["msg"] != nil
            - set(severity_text,cache["level"]) where cache["level"] != nil
            - set(severity_text,cache["severity"]) where cache["severity"] != nil
            - set(severity_number,SEVERITY_NUMBER_INFO) where cache["level"] == "INFO"
            - set(severity_number,SEVERITY_NUMBER_INFO) where cache["severity"] == "info"
            - set(attributes["loggerName"],cache["loggerName"]) where cache["loggerName"] != nil

      k8sattributes:
        auth_type: "serviceAccount"
        passthrough: false
        filter:
          node_from_env_var: KUBE_NODE_NAME
        extract:
          metadata:
            - k8s.pod.name
            - k8s.pod.uid
            - k8s.deployment.name
            - k8s.node.name
            - k8s.pod.start_time
          labels:
            - tag_name: app.label.ingress-nginx
              key: ingress-nginx
              from: pod
            - tag_name: app.label.support-group
              key: ccloud/support-group
              from: pod
            - tag_name: app.label.app_name
              key: app.kubernetes.io/app_name
              from: pod
            - tag_name: app.label.component
              key: app.kubernetes.io/component
              from: pod
            - tag_name: app.label.name
              key: app.kubernetes.io/name
              from: pod
            - tag_name: app.label.instance
              key: app.kubernetes.io/instance
              from: pod
            - tag_name: app.label.pod-template-hash
              key: app.kubernetes.io/pod-template-hash
              from: pod
        pod_association:
          - sources:
              - from: resource_attribute
                name: k8s.pod.ip
          - sources:
              - from: resource_attribute
                name: k8s.pod.uid
          - sources:
              - from: resource_attribute
                name: k8s.pod.name
          - sources:
              - from: connection
      memory_limiter:
        check_interval: 5s
        limit_percentage: 70
        spike_limit_percentage: 30

    exporters:
      debug:
        verbosity: detailed
      opensearch/logs:
        http:
          auth:
            authenticator: basicauth
          endpoint: {{ index .Values "open_telemetry" "opensearch_logs" "endpoint" }}
        logs_index: ${username}-datastream
        
      prometheus:
        endpoint: 0.0.0.0:9999

    extensions:
      basicauth:
        client_auth:
          username: ${username}
          password: ${password}

    connectors:
      routing:
        default_pipelines: [logs/containerd]
        error_mode: ignore
        table:
          - statement: route() where attributes["container.runtime"] =="containerd"
            pipelines: [logs/containerd]

    service:
      extensions:
        - basicauth
{{- if index .Values "open_telemetry" "podMonitor" "enabled" }}
      telemetry:
        metrics:
          address: 127.0.0.1:8888
          level: detailed
{{- end }}
      pipelines:
        logs/containerd:
          receivers: [filelog]
          processors: [transform/containerd,k8sattributes,attributes/cluster,batch]
          exporters: [opensearch/logs]
        logs/k8sevents:
          receivers: [k8s_events]
          processors: [resource/k8sevents,batch]
          exporters: [opensearch/logs]
{{- if index .Values "open_telemetry" "podMonitor" "enabled" }}
        metrics/prometheus:
          receivers: [prometheus/internal]
          processors: [attributes/prometheus]
          exporters: [prometheus]
{{- end }}
