{{/*
SPDX-FileCopyrightText: 2024 SAP SE or an SAP affiliate company and Greenhouse contributors
SPDX-License-Identifier: Apache-2.0
*/}}

{{- if .Values.openTelemetry.logsCollector.enabled }}
apiVersion: opentelemetry.io/v1beta1
kind: OpenTelemetryCollector
metadata:
  name: logs
  labels:
  {{- include "plugin.labels" . | nindent 4 }} 
  {{- if .Values.customLabels }}
  {{ toYaml .Values.customLabels | nindent 4 }}
  {{- end }}
spec:
  mode: daemonset
  tolerations:
  - operator: Exists
  env:
    - name: NAMESPACE
      valueFrom:
        fieldRef:
          fieldPath: metadata.namespace
    - name: KUBE_NODE_NAME
      valueFrom:
        fieldRef:
          fieldPath: spec.nodeName
    - name: MY_POD_IP
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: status.podIP
    - name: cluster
      value: "{{ .Values.openTelemetry.cluster }}"
    - name: region
      value: "{{ .Values.openTelemetry.region }}"
  envFrom:
    - secretRef:
         name: otel-basic-auth
{{- if .Values.openTelemetry.prometheus.podMonitor.enabled }}
  ports:
    - name: prometheus
      port: 9999
{{- end }}
  image: {{ index .Values "opentelemetry-operator" "manager" "collectorImage" "repository" }}:{{ index .Values "opentelemetry-operator" "manager" "collectorImage" "tag" }}
  volumeMounts:
  - mountPath: /var/log
    name: varlog
    readOnly: true
  volumes:
  - name: varlog
    hostPath:
      path: /var/log
  config:
    receivers:
      journald:
        directory: /var/log/journal
        operators:
          - id: journal-label
            type: add
            field: attributes["log.type"]
            value: "journald"

      k8s_events:
        auth_type: serviceAccount

      filelog:
        include_file_path: true
        include: [ /var/log/pods/*/*/*.log ]
        exclude: [ /var/log/pods/otel_logs-*, /var/log/pods/logs_* ]
        operators:
          - id: container-parser
            type: container
          - id: parser-containerd
            type: add
            field: resource["container.runtime"]
            value: "containerd"

{{- if .Values.openTelemetry.prometheus.podMonitor.enabled }}
      prometheus/internal:
        config:
          scrape_configs:
            - job_name: 'internal'
              scrape_interval: 5s
              static_configs:
                - targets: ['127.0.0.1:8888']
{{- end }}

    processors:
      batch:
        send_batch_max_size: 500
        timeout: 5s
        send_batch_size : 10

{{- if .Values.openTelemetry.prometheus.podMonitor.enabled }}
      attributes/prometheus:
        actions:
          - action: insert
            key: k8s_node_name
            value: "${KUBE_NODE_NAME}"
          - action: insert
            key: k8s_cluster_name
            value: "${cluster}"
          - action: insert
            key: region
            value: "${region}"
          - action: delete
            key: service_instance_id
          - action: delete
            key: pod
{{- end }}

      attributes/cluster:
        actions:
          - action: insert
            key: k8s.cluster.name
            value: "${cluster}"
          - action: insert
            key: region
            value: "${region}"
          - action: insert
            key: k8s.node.name
            value: "${KUBE_NODE_NAME}"

      attributes/k8sevents:
        attributes:
          - action: insert
            key: k8s.node.name
            value: "${KUBE_NODE_NAME}"
          - action: insert
            key: k8s.cluster.name
            value: "${cluster}"
          - action: insert
            key: region
            value: "${region}"
          - action: insert
            key: log.type
            value: "k8sevents"

      transform/journal:
        error_mode: ignore
        log_statements:
          - context: log
            statements:
              - merge_maps(cache, body, "upsert") where IsMatch(body, "^\\{")
              - set(attributes["message"], cache["MESSAGE"])
              - set(attributes["code_file"], cache["CODE_FILE"])
              - set(attributes["code_func"], cache["CODE_FUNC"])
              - set(attributes["code_line"], cache["CODE_LINE"])
              - set(attributes["incovation_id"], cache["INVOCATION_ID"])
              - set(attributes["message_id"], cache["MESSAGE_ID"])
              - set(attributes["priority"], cache["PRIORITY"])
              - set(attributes["syslog_facility"], cache["SYSLOG_FACILITY"])
              - set(attributes["syslog_identifier"], cache["SYSLOG_IDENTIFIER"])
              - set(attributes["tid"], cache["TID"])
              - set(attributes["unit"], cache["UNIT"])
              - set(attributes["boot_id"], cache["_BOOT_ID"])
              - set(attributes["cao_effective"], cache["_CAP_EFFECTIVE"])
              - set(attributes["cmdline"], cache["_CMDLINE"])
              - set(attributes["exe"], cache["_EXE"])
              - set(attributes["gid"], cache["_GID"])
              - set(attributes["hostname"], cache["_HOSTNAME"])
              - set(attributes["machine_id"], cache["_MACHINE_ID"])
              - set(attributes["pid"], cache["_PID"])
              - set(attributes["runtime_scope"], cache["_RUNTIME_SCOPE"])
              - set(attributes["selinux_context"], cache["_SELINUX_CONTEXT"])
              - set(attributes["source_realtime_timestamp"], cache["_SOURCE_REALTIME_TIMESTAMP"])
              - set(attributes["systemd_cgroup"], cache["_SYSTEMD_CGROUP"])
              - set(attributes["systemd_slice"], cache["_SYSTEMD_SLICE"])
              - set(attributes["systemd_unit"], cache["_SYSTEMD_UNIT"])
              - set(attributes["transport"], cache["_TRANSPORT"])
              - set(attributes["uid"], cache["_UID"])
              - set(attributes["cursor"], cache["__CURSOR"])
              - set(attributes["monotonic_timestamp"], cache["__MONOTONIC_TIMESTAMP"])
              - delete_key(attributes, "cache")

      transform/containerd:
        log_statements:
          - context: log
            statements:
              - merge_maps(cache,ExtractPatterns(body,"^(?P<time>[^Z]+Z) (?P<stream>stdout|stderr) (?P<logtag>[^\\s]*) ?(?P<log>.*)$"), "upsert") where body != nil
              - merge_maps(cache,ExtractPatterns(body,"^(?P<time>\\d+/\\d+/\\d+\\s+\\d+:\\d+\\d+) (?P<log>.*)$"), "upsert") where attributes["log_name"]!= "MeshAccessLog" and cache["log"]!= nil and not IsMap(cache["log"])
              - set(body,cache["log"]) where cache["log"] != nil
              - merge_maps(cache,ParseJSON(body), "upsert") where IsMap(body)
              - set(body,cache["message"]) where cache["message"] != nil
              - set(body,cache["msg"]) where cache["msg"] != nil
              - set(severity_text,cache["level"]) where cache["level"] != nil
              - set(severity_text,cache["severity"]) where cache["severity"] != nil
              - set(severity_number,SEVERITY_NUMBER_INFO) where cache["level"] == "INFO"
              - set(severity_number,SEVERITY_NUMBER_INFO) where cache["severity"] == "info"
              - set(attributes["loggerName"],cache["loggerName"]) where cache["loggerName"] != nil

      transform/ingress:
        error_mode: ignore
        log_statements:
          - context: log
            conditions:
              - resource.attributes["app.label.name"] == "ingress-nginx"
            statements:
              - merge_maps(attributes, ExtractGrokPatterns(body, "%{IP:client.address} %{NOTSPACE:client.ident} %{NOTSPACE:client.auth} \\[%{HTTPDATE:timestamp}\\] \"%{WORD:request_method} %{NOTSPACE:request_path} %{WORD:network.protocol.name}/%{NOTSPACE:network.protocol.version}\" %{NUMBER:response} %{NUMBER:content_length:int} %{QUOTEDSTRING} \"%{GREEDYDATA:user_agent}\" %{NUMBER:request_length:int} %{BASE10NUM:request_time:float}( \\[%{NOTSPACE:service}\\])? ?(\\[\\])? %{IP:server.address}\\:%{NUMBER:server.port} %{NUMBER:upstream_response_length:int} %{BASE10NUM:upstream_response_time:float} %{NOTSPACE:upstream_status} %{NOTSPACE:request_id}", true),"upsert")
              - set(attributes["network.protocol.name"], ConvertCase(attributes["network.protocol.name"], "lower"))

      transform/ceph:
        error_mode: ignore
        log_statements:
          - context: log
            conditions:
              - resource.attributes["app.label.component"] == "cephobjectstores.ceph.rook.io"
            statements:
              - merge_maps(attributes, ExtractGrokPatterns(body, "%{WORD:debug_level} %{TIMESTAMP_ISO8601:log_timestamp}(%{SPACE})?%{NOTSPACE}(%{SPACE})?%{NOTSPACE}(%{SPACE})?%{WORD}\\:(%{SPACE})?%{WORD}\\:(%{SPACE})?%{IP:client.address}(%{SPACE})?%{NOTSPACE}(%{SPACE})?%{WORD:project.id}(\\$%{NOTSPACE})?(%{SPACE})?\\[%{HTTPDATE:request.timestamp}\\] \"%{WORD:request.method} \\/(?<bucket>[a-zA-Z0-9._+-]+)\\/%{NOTSPACE:request.path} %{WORD:network.protocol.name}/%{NOTSPACE:network.protocol.version}\" %{NUMBER:response} %{NUMBER:content.length:int} %{NOTSPACE} \"%{GREEDYDATA:user.agent}\" %{NOTSPACE} latency=%{NUMBER:latency:float}", true),"upsert")
              - set(attributes["network.protocol.name"], ConvertCase(attributes["network.protocol.name"], "lower")) where cache["network.protocol.name"] != nil

      k8sattributes:
        auth_type: "serviceAccount"
        passthrough: false
        filter:
          node_from_env_var: KUBE_NODE_NAME
        extract:
          metadata:
            - k8s.namespace.name
            - k8s.pod.name
            - k8s.pod.uid
            - k8s.pod.ip
            - k8s.pod.start_time
            - k8s.deployment.name
            - k8s.deployment.uid
            - k8s.node.name
            - k8s.replicaset.name
            - k8s.replicaset.uid
            - k8s.statefulset.name
            - k8s.statefulset.uid
            - k8s.daemonset.name
            - k8s.daemonset.uid
            - k8s.job.name
            - k8s.job.uid
            - k8s.cronjob.name
            - k8s.node.uid
            - k8s.cluster.uid
            - k8s.container.name
            - container.image.name
            - container.image.tag
          labels:
            - tag_name: app.label.ingress-nginx
              key: ingress-nginx
              from: pod
            - tag_name: app.label.support-group
              key: ccloud/support-group
              from: pod
            - tag_name: app.label.app_name
              key: app.kubernetes.io/app_name
              from: pod
            - tag_name: app.label.component
              key: app.kubernetes.io/component
              from: pod
            - tag_name: app.label.name
              key: app.kubernetes.io/name
              from: pod
            - tag_name: app.label.instance
              key: app.kubernetes.io/instance
              from: pod
            - tag_name: app.label.pod-template-hash
              key: app.kubernetes.io/pod-template-hash
              from: pod
            #ceph
            - tag_name: app.label.component
              key: app.kubernetes.io/component
              from: pod
            - tag_name: app.label.created-by
              key: app.kubernetes.io/created-by
              from: pod
            - tag_name: app.label.managed-by
              key: app.kubernetes.io/managed-by
              from: pod
            - tag_name: app.label.part-of
              key: app.kubernetes.io/part-of
              from: pod
            - tag_name: app.label.ceph-osd-id
              key: ceph-osd-id
              from: pod
            - tag_name: app.label.ceph_daemon_id
              key: ceph_daemon_id
              from: pod
            - tag_name: app.label.ceph_daemon_type
              key: ceph_daemon_type
              from: pod
            - tag_name: app.label.device-class
              key: device-class
              from: pod
            - tag_name: app.label.failure-domain
              key: failure-domain
              from: pod
            - tag_name: app.label.osd
              key: osd
              from: pod
            - tag_name: app.label.osd-store
              key: osd-store
              from: pod
            - tag_name: app.label.portable
              key: portable
              from: pod
            - tag_name: app.label.rook_cluster
              key: rook_cluster
              from: pod
            - tag_name: app.label.rook_io.operator-namespace
              key: rook_io/operator-namespace
              from: pod
            - tag_name: app.label.topology-location-host
              key: topology-location-host
              from: pod
            - tag_name: app.label.topology-location-region
              key: topology-location-region
              from: pod
            - tag_name: app.label.topology-location-region
              key: topology-location-region
              from: pod
            - tag_name: app.label.topology-location-root
              key: topology-location-root
              from: pod
            - tag_name: app.label.topology-location-zone
              key: topology-location-zone
              from: pod
        pod_association:
          - sources:
              - from: resource_attribute
                name: k8s.pod.ip
          - sources:
              - from: resource_attribute
                name: k8s.pod.uid
          - sources:
              - from: resource_attribute
                name: k8s.pod.name
          - sources:
              - from: connection
      memory_limiter:
        check_interval: 5s
        limit_percentage: 80
        spike_limit_percentage: 30

    exporters:
      debug:
        verbosity: detailed
      opensearch/logs:
        http:
          auth:
            authenticator: basicauth
          endpoint: {{ .Values.openTelemetry.openSearchLogs.endpoint }}
        logs_index: ${username}-datastream
        
      prometheus:
        endpoint: 0.0.0.0:9999

    extensions:
      basicauth:
        client_auth:
          username: ${username}
          password: ${password}

    connectors:
      routing:
        default_pipelines: [logs/containerd]
        error_mode: ignore
        table:
          - statement: route() where attributes["container.runtime"] =="containerd"
            pipelines: [logs/containerd]

    service:
      extensions:
        - basicauth
{{- if .Values.openTelemetry.prometheus.podMonitor.enabled }}
      telemetry:
        metrics:
          address: 127.0.0.1:8888
          level: detailed
{{- end }}
      pipelines:
        logs/containerd:
          receivers: [filelog]
          processors: [k8sattributes,transform/ingress,transform/ceph,attributes/cluster,batch]
          exporters: [opensearch/logs]
        logs/k8sevents:
          receivers: [k8s_events]
          processors: [resource/k8sevents,batch]
          exporters: [opensearch/logs]
        logs/journald:
          receivers: [journald]
          processors: [attributes/cluster,transform/journal,batch]
          exporters: [opensearch/logs]
{{- if .Values.openTelemetry.prometheus.podMonitor.enabled }}
        metrics/prometheus:
          receivers: [prometheus/internal]
          processors: [attributes/prometheus]
          exporters: [prometheus]
{{- end }}
{{- end }}
