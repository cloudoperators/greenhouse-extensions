{{- if .Values.testFramework.enabled -}}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-test
  namespace: {{ .Release.Namespace }}
  labels:
    type: integration-test
{{- include "kube-prometheus-stack.labels" . | indent 4 }}
data:
  run.sh: |-

    #!/usr/bin/env bats

    load "/usr/lib/bats/bats-detik/utils"
    load "/usr/lib/bats/bats-detik/detik"

    DETIK_CLIENT_NAME="kubectl"
    {{- if .Values.alerts.prometheusOperator.enabled }}
    @test "Verify successful deployment, service and running status of the {{ .Release.Name }}-operator pod" {
        verify "there is 1 deployment named '{{ .Release.Name }}-operator'"
        verify "there is 1 service named '{{ .Release.Name }}-operator'"
        try "at most 2 times every 5s to get pods named '{{ .Release.Name }}-operator.*' and verify that '.status.phase' is 'running'"
    }
    {{- end }}
   
    {{- if .Values.alerts.alertmanager.enabled }}
    @test "Verify that alertmanager is available and reconciled" {
        try "at most 5 times every 5s to get alertmanagers named  '{{ .Release.Name }}' and verify that '.status.conditions[0].status' is 'True'"
        try "at most 5 times every 5s to get alertmanagers named  '{{ .Release.Name }}' and verify that '.status.conditions[1].status' is 'True'"
    }
    {{- end }}

    {{- if .Values.alerts.crds.enabled }}
    @test "Verify creation of required custom resource definitions (CRDs) for {{ .Release.Name }}" {
        verify "there is 1 customresourcedefinition named 'alertmanagerconfigs'"
        verify "there is 1 customresourcedefinition named 'alertmanagers'"
        verify "there is 1 customresourcedefinition named 'podmonitors'"
        verify "there is 1 customresourcedefinition named 'probes'"
        verify "there is 1 customresourcedefinition named 'prometheuses'"
        verify "there is 1 customresourcedefinition named 'prometheusrules'"
        verify "there is 1 customresourcedefinition named 'prometheusagents'"
        verify "there is 1 customresourcedefinition named 'servicemonitors'"
        verify "there is 1 customresourcedefinition named 'scrapeconfigs'"
        verify "there is 1 customresourcedefinition named 'thanosrulers'"
    }
    {{- end }}

    {{- if and .Values.alerts.alertmanager.ingress.enabled .Values.alerts.alertmanager.ingress.hosts .Values.alerts.certManager.enabled }}
    @test "Generated server certificate for the Prometheus Alertmanager to use" {
        verify "there is 1 issuer named '{{ .Release.Namespace }}-alerts-issuer'"
        verify "there is 1 issuer named '{{ .Release.Namespace }}-alerts-root-issuer'"
        verify "there is 1 certificate named '{{ .Release.Namespace }}-alerts-root-cert'"
        verify "there is 1 certificate named 'alertmanager-{{ .Release.Namespace }}-cert'"
        verify "there is 1 certificate named 'prometheus-{{ .Release.Namespace }}-cert'"
        verify "there is 1 secret named 'tls-alertmanager-{{ .Release.Namespace }}'"
        verify "there is 1 secret named 'tls-prometheus-{{ .Release.Namespace }}'"

        url="https://{{ first .Values.alerts.alertmanager.ingress.hosts }}/-/healthy"
        run curl --cert /tls-assets/tls.crt --key /tls-assets/tls.key ${url}
        [ "$status" -eq "0" ]
    }
    {{- end }}

{{- end -}}
